{"version":3,"sources":["components/Card.jsx","components/Hand.jsx","components/Stats.jsx","components/Chips.jsx","App.js","serviceWorker.js","index.js","images/blankCard.jpg"],"names":["Card","state","value","_this","props","card","suit","code","image","react_default","a","createElement","className","src","this","alt","Component","Hand","cards","length","map","Card_Card","key","history","name","playerPlaying","dealerInitialScore","score","blankCard","onClick","event","handleDrawCardEvent","handleStandEvent","handleDoubleDownEvent","playerSplittable","handleSplitEvent","handleDealEvent","Stats","totalHands","playerWins","dealerWins","pushes","playerWinPercent","Math","floor","dealerWinPercent","playerBlackjacks","playerBusts","dealerBlackjacks","dealerBusts","Chips","gameStarted","increaseChipOne","increaseChipFive","increaseChipTen","increaseChipTwentyFive","clearChips","playerChips","toFixed","chipsInPlay","winAmount","increaseBetOne","increaseBetFive","increaseBetTen","increaseBetTwentyFive","clearBets","betAmount","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","playerScore","fetch","concat","deckId","then","res","json","newValue","returnValue","playerHasAce","playerHand","toConsumableArray","bustChecker","catch","err","console","log","dealerScore","dealerHasAce","dealerHand","checkWinner","gameMessage","dealerSplit","dealerHasBlackjack","insurance","playerHasBlackjack","handleDealHand","_this2","deck_id","_this3","ACE","KING","QUEEN","JACK","10","9","8","7","6","5","4","3","2","_this4","remaining","value0","value1","value2","value3","blackJackChecker","_this5","handleEndGame","Chips_Chips","Hand_Hand","Stats_Stats","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b6980ece.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n  state = {\n    value: this.props.card.value,\n    suit: this.props.card.suit,\n    code: this.props.card.code,\n    image: this.props.card.image\n  };\n\n  render() {\n    return (\n      <div className=\"Card\">\n        <img src={this.state.image} alt=\"Card\" />\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Card from \"./Card.jsx\";\n\nimport blankCard from '../images/blankCard.jpg';\n\nexport default class Hand extends Component {\n\n  render() {\n    let cards;\n    if (this.props.cards.length) {\n      cards = this.props.cards.map(card => (\n        <Card\n          key={card.code}\n          card={card}\n          history={this.props.history}\n        />\n      ));\n    };\n\n    return (\n      <div className=\"Hand\">\n        {this.props.name === \"Dealer\" ? (\n          <div>\n            <h3>{this.props.name}</h3>\n            {this.props.playerPlaying ? (\n                <h5>{this.props.dealerInitialScore}</h5>\n            ) : (\n                <h5>{this.props.score}</h5>\n            )}\n            {this.props.playerPlaying ? (\n                <div className=\"cards-container\"><img src={blankCard} alt=\"cardback\" className=\"blankCard\" />{cards[1]}</div>\n            ) : (\n                <div className=\"cards-container\">{cards}</div> \n            )}\n          </div>\n          ) : (\n            <div className=\"hand-container\">\n                <h3>{this.props.name}</h3>\n                <h5>{this.props.score}</h5>\n                <div className=\"cards-container\">{cards}</div>\n                {this.props.playerPlaying ? (\n                    <div className=\"playingButtons\">\n                        <button\n                        className=\"sm\"\n                        onClick={event => this.props.handleDrawCardEvent(event)}\n                        >\n                        Hit\n                        </button>\n                        <button\n                        className=\"sm\"\n                        onClick={event => this.props.handleStandEvent(event)}\n                        >\n                        Stand\n                        </button>\n                        {this.props.cards.length === 2 ? (\n                            <button\n                            className=\"sm\"\n                            onClick={event => this.props.handleDoubleDownEvent(event)}\n                            >\n                            Double Down\n                            </button>\n                        ) : (\n                            \"\"\n                        )}\n                        {this.props.playerSplittable ? (\n                            <button\n                            className=\"sm\"\n                            onClick={event => this.props.handleSplitEvent(event)}\n                            >\n                            Split\n                            </button>\n                        ) : (\n                            \"\"\n                        )}\n                    </div>\n                ) : (\n                    <button\n                    className=\"sm\"\n                    onClick={event => this.props.handleDealEvent(event)}\n                    >\n                    Deal\n                    </button>\n                )}\n                </div>\n            )}\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Stats extends Component {\n  \n    render() {\n\n    var totalHands = this.props.playerWins + this.props.dealerWins + this.props.pushes;\n    var playerWinPercent = Math.floor(this.props.playerWins/totalHands*100);\n    var dealerWinPercent = Math.floor(this.props.dealerWins/totalHands*100);\n\n    return (\n      <div className=\"stats-container\">\n        <div className=\"playerStats\">\n            <p>Player Wins: {this.props.playerWins}</p>\n            <p>Player Win Percentage: {playerWinPercent ? (playerWinPercent) : (\"0\")}%</p>\n            <p>Player Blackjacks: {this.props.playerBlackjacks}</p>\n            <p>Player Busts: {this.props.playerBusts}</p>\n        </div>\n        <div className=\"gameStats\">\n            <p>Pushes: {this.props.pushes}</p>\n            <p>Total Hands: {totalHands}</p>\n        </div>\n        <div className=\"dealerStats\">\n            <p>Dealer Wins: {this.props.dealerWins}</p>\n            <p>Dealer Win Percentage: {dealerWinPercent ? (dealerWinPercent) : (\"0\")}%</p>\n            <p>Dealer Blackjacks: {this.props.dealerBlackjacks}</p>\n            <p>Dealer Busts: {this.props.dealerBusts}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Chips extends Component {\n  \n    render() {\n\n    return (\n      <div className=\"chips-container\">\n      {/* If game is not started then show player chips buttons */}\n        {this.props.gameStarted === false ? (\n            <div className=\"buyInButtons\">\n                <button className=\"sm\" onClick={event => this.props.increaseChipOne(event)}>$1</button>\n                <button className=\"sm\" onClick={event => this.props.increaseChipFive(event)}>$5</button>\n                <button className=\"sm\" onClick={event => this.props.increaseChipTen(event)}>$10</button>\n                <button className=\"sm\" onClick={event => this.props.increaseChipTwentyFive(event)}>$25</button>\n                <button className=\"sm\" onClick={event => this.props.clearChips(event)}>Clear Chips</button>\n                <p>Buy-In Amount: $ {this.props.playerChips.toFixed(2)}</p>\n            </div>\n        ) : (\n            <div className=\"chipStats\">\n              <p>Player Chips: $ {this.props.playerChips.toFixed(2)}</p>\n              <p>Chips in Play: $ {this.props.chipsInPlay.toFixed(2)}</p>\n              <p>Win Amount: $ {this.props.winAmount.toFixed(2)}</p>\n            </div>\n        )}\n        <div className=\"chipBets\">\n            {/* If player is not playing then show bet buttons */}\n            {this.props.playerPlaying === false ? (\n                <div className=\"chipButtons\">\n                    <button className=\"sm\" onClick={event => this.props.increaseBetOne(event)}>$1</button>\n                    <button className=\"sm\" onClick={event => this.props.increaseBetFive(event)}>$5</button>\n                    <button className=\"sm\" onClick={event => this.props.increaseBetTen(event)}>$10</button>\n                    <button className=\"sm\" onClick={event => this.props.increaseBetTwentyFive(event)}>$25</button>\n                    <button className=\"sm\" onClick={event => this.props.clearBets(event)}>Clear Bets</button>\n                </div>\n            ) : (\n                \"\"\n            )}\n            <p>Bet Amount: $ {this.props.betAmount.toFixed(2)}</p>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Hand from \"./components/Hand.jsx\";\nimport Stats from \"./components/Stats.jsx\";\nimport Chips from \"./components/Chips.jsx\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    // Set the initial state of the application\n    this.state = {\n      // Game states\n      gameStarted: false,\n      playerPlaying: false,\n      deckId: \"\",\n      // Dealer options and flags\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      // Player options and flags\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: \"\",\n      // Betting options and flags\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0\n    };\n  };\n\n  // Fetches deck(s) from Deck of Cards API\n  componentDidMount() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          deckId: json.deck_id\n        });\n      });\n  };\n\n  // When End Game is pressed a new deck is drawn, reset state to initial state\n  handleEndGame() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n    .then(res => res.json())\n    .then(json => {\n      this.setState({\n        deckId: json.deck_id\n      });\n    });\n    this.setState({\n      gameStarted: false,\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: \"\",\n      // Betting options and flags\n      playerChips: 0,\n      betAmount: 20,\n      chipsInPlay: 0,\n      winAmount: 0\n    })\n  };\n\n  // Handle Chips Increase buttons\n  increaseChipOne = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 1\n    });\n  };\n\n  increaseChipFive = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 5\n    }); \n  };\n\n  increaseChipTen = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 10\n    });\n  };\n\n  increaseChipTwentyFive = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 25\n    });\n  };\n\n  clearChips = event => {\n    this.setState({\n      playerChips: 0\n    });\n  };\n\n\n  // Handle Betting buttons\n  increaseBetOne = event => {\n    this.setState({\n      betAmount: this.state.betAmount + 1\n    });\n  };\n\n  increaseBetFive = event => {\n    this.setState({\n      betAmount: this.state.betAmount + 5\n    }); \n  };\n\n  increaseBetTen = event => {\n    this.setState({\n      betAmount: this.state.betAmount + 10\n    });\n  };\n\n  increaseBetTwentyFive = event => {\n    this.setState({\n      betAmount: this.state.betAmount + 25\n    });\n  };\n\n  clearBets = event => {\n    this.setState({\n      betAmount: 0\n    });\n  };\n\n  // Return corresponding blackjack value from input card value \n  returnValue(value) {\n    const cardValues = {\n      ACE: 11,\n      KING: 10,\n      QUEEN: 10,\n      JACK: 10,\n      \"10\": 10,\n      \"9\": 9,\n      \"8\": 8,\n      \"7\": 7,\n      \"6\": 6,\n      \"5\": 5,\n      \"4\": 4,\n      \"3\": 3,\n      \"2\": 2\n    };\n\n    return cardValues[value];\n  };\n\n  // Handle the initial hand deal, i.e. when Start Game is clicked or when Deal is clicked\n  handleDealHand() {\n    // If player bet is zero\n    if (this.state.betAmount === 0) {\n      this.setState({\n        gameMessage: \"You have to bet some money!\"\n      });\n    } else if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You do not have that much money\"\n      });\n    } else {\n      // Deal with initial betting\n      this.setState({\n        betAmount: this.state.betAmount,\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.betAmount,\n        winAmount: 0,\n      });\n      // Draw 4 cards from the deck\n      fetch(`https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=4`)\n      .then(res => res.json())\n      .then(json => {\n        // Check remaining cards and shuffle deck if remaining cards is less than 100 cards, or 25% of deck\n        console.log(json.remaining);\n        if (json.remaining < 100) {\n          fetch(`https://deckofcardsapi.com/api/deck/${this.state.deckId}/shuffle/`)\n          .then(res => res.json())\n          .then(json => {\n            console.log(json);\n            console.log(\"Deck reshuffled!\");\n          });\n        };\n\n        // Return blackjack values of json card values\n        const value0 = this.returnValue(json.cards[0].value);\n        const value1 = this.returnValue(json.cards[1].value);\n        const value2 = this.returnValue(json.cards[2].value);\n        const value3 = this.returnValue(json.cards[3].value);\n\n        // Check if the player has two Aces first or just an Ace, or else set default state \n        if (value0 === 11 && value2 === 11) {\n          this.setState({\n            gameStarted: true,\n            playerPlaying: true,\n            playerHand: [...this.state.playerHand, json.cards[0], json.cards[2]],\n            playerHasAce: true,\n            playerSplittable: true,\n            playerScore: 12,\n            dealerHand: [...this.state.dealerHand, json.cards[1], json.cards[3]],\n            dealerHasAce: false,\n            dealerScore: (this.state.dealerScore += value1 + value3),\n            dealerInitialScore: value3\n          });\n        } else if (value0 === 11 || value2 === 11) {\n          this.setState({\n            gameStarted: true,\n            playerPlaying: true,\n            playerHand: [...this.state.playerHand, json.cards[0], json.cards[2]],\n            playerScore: (this.state.playerScore += value0 + value2),\n            playerHasAce: true,\n            dealerHand: [...this.state.dealerHand, json.cards[1], json.cards[3]],\n            dealerHasAce: false,\n            dealerScore: (this.state.dealerScore += value1 + value3),\n            dealerInitialScore: value3\n          });\n        } else if (value0 === value2) {\n          this.setState({\n            gameStarted: true,\n            playerPlaying: true,\n            playerSplittable: true,\n            playerHand: [...this.state.playerHand, json.cards[0], json.cards[2]],\n            playerScore: (this.state.playerScore += value0 + value2),\n            dealerHand: [...this.state.dealerHand, json.cards[1], json.cards[3]],\n            dealerHasAce: false,\n            dealerScore: (this.state.dealerScore += value1 + value3),\n            dealerInitialScore: value3\n          });\n        } else {\n          this.setState({\n            gameStarted: true,\n            playerPlaying: true,\n            playerHand: [...this.state.playerHand, json.cards[0], json.cards[2]],\n            playerScore: (this.state.playerScore += value0 + value2),\n            dealerHand: [...this.state.dealerHand, json.cards[1], json.cards[3]],\n            dealerHasAce: false,\n            dealerScore: (this.state.dealerScore += value1 + value3),\n            dealerInitialScore: value3\n          });\n        };\n        // Check if dealer has two aces or an ace\n        if (value1 === 11 && value3 === 11) {\n          this.setState({\n            dealerHasAce: true,\n            dealerScore: 12,\n            insurance: true,\n            gameMessage: \"Insurance?\"\n          });\n        } else if (value3 === 11) {\n          this.setState({\n            dealerHasAce: true,\n            insurance: true,\n            gameMessage: \"Insurance?\"\n          });\n        } else if (value1 === 11 || value3 === 11) {\n          this.setState({\n            dealerHasAce: true\n          });\n        };\n        // After the ace checks\n        this.blackJackChecker();\n      })\n      .catch(err => console.log(err))\n      };\n    };\n\n  // Checks for blackjack\n  blackJackChecker() {\n    \n    // Check for player blackjack\n    if (this.returnValue(this.state.playerHand[0].value) === 10 && this.returnValue(this.state.playerHand[1].value) === 11) {\n      this.setState({\n        playerHasBlackjack: true\n      });\n    } else if (this.returnValue(this.state.playerHand[1].value) === 10 && this.returnValue(this.state.playerHand[0].value) === 11) {\n      this.setState({\n        playerHasBlackjack: true\n      });\n    };\n\n    // Check for dealer blackjack\n    if (this.returnValue(this.state.dealerHand[0].value) === 10 && this.returnValue(this.state.dealerHand[1].value) === 11) {\n      this.setState({\n        dealerHasBlackjack: true\n      });\n    } else if (this.returnValue(this.state.dealerHand[1].value) === 10 && this.returnValue(this.state.dealerHand[0].value) === 11) {\n      this.setState({\n        dealerHasBlackjack: true\n      });\n    };\n\n    // Check who has blackjacks and award chips accordingly\n    if (this.state.playerHasBlackjack && this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        pushes: this.state.pushes + 1,\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: \"Push! You both have a Blackjack!\",\n      });\n    } else if (this.state.playerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        playerWins: this.state.playerWins + 1,\n        playerBlackjacks: this.state.playerBlackjacks + 1,\n        playerChips: this.state.playerChips + this.state.betAmount + (3 * this.state.chipsInPlay/2),\n        winAmount: 3*this.state.chipsInPlay/2,\n        chipsInPlay: 0,\n        gameMessage: \"Blackjack!\"\n      });\n    } else if (this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        dealerBlackjacks: this.state.dealerBlackjacks + 1,\n        chipsInPlay: 0,\n        gameMessage: \"Dealer has a Blackjack!\"\n      });\n    };\n  };\n\n  // Checks if the player bust, if there is an ace in hand subtract 10 and set playerHasAce to false\n  bustChecker() {\n    if (this.state.playerHasAce && this.state.playerScore > 21) {\n      this.setState({\n        playerScore: this.state.playerScore - 10,\n        playerHasAce: false\n      })\n    } else if (this.state.playerScore > 21) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        playerBusts: this.state.playerBusts + 1,\n        chipsInPlay: 0,\n        gameMessage: \"You Busted!\"\n      });\n    };\n  };\n\n  // Determines winner of hand\n  checkWinner() {\n    if (this.state.dealerScore > 21) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        dealerBusts: this.state.dealerBusts + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: \"Dealer busts, you won!\"\n      });\n    } else if (this.state.playerScore > this.state.dealerScore && this.state.playerScore <= 21) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: `You won!`\n      });\n    } else if (this.state.playerScore === this.state.dealerScore) {\n      this.setState({\n        // Set statistics\n        pushes: this.state.pushes + 1,\n        // Set chips, return original chips in play if push\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: \"You pushed!\"\n      });\n    } else {\n      this.setState({\n        // Set statistics\n        dealerWins: this.state.dealerWins + 1,\n        // Set chips\n        chipsInPlay: 0,\n        gameMessage: \"You lost!\"\n      });\n    };\n  };\n\n  // When player clicks HIT\n  handleDrawCardEvent = event => {\n    if (this.state.playerScore < 21) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then(res => res.json())\n        .then(json => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if player hits multiple aces\n          if (newValue === 11 && this.state.playerHasAce) {\n            this.setState({\n              playerScore: this.state.playerScore - 10,\n              playerHasAce: true,\n              playerSplittable: false\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              playerHasAce: true,\n              playerSplittable: false\n            });\n          };\n          // Otherwise update player hand and player score from response\n          this.setState({\n            playerHand: [...this.state.playerHand, json.cards[0]],\n            playerScore: (this.state.playerScore += newValue),\n            playerSplittable: false\n          });\n          this.bustChecker();\n        })\n        .catch(err => console.log(err));\n    };\n  };\n\n  // When player clicks STAND, execute dealer hits less than 17\n  handleStandEvent = event => {\n    // If the dealer has an ace and is greater than 21, subtract 10 and set the ace flag to false, recursively call itself\n    if (this.state.dealerScore > 21 && this.state.dealerHasAce) {\n      this.setState({\n        dealerScore: this.state.dealerScore - 10,\n        dealerHasAce: false\n      });\n      this.handleStandEvent();\n    } else if (this.state.dealerScore < 17) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then(res => res.json())\n        .then(json => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if dealer hits multiple aces\n          if (newValue === 11 && this.state.dealerHasAce) {\n            this.setState({\n              dealerScore: this.state.dealerScore - 10,\n              dealerHasAce: true\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              dealerHasAce: true\n            });\n          };\n          this.setState({\n            playerPlaying: false,\n            dealerHand: [...this.state.dealerHand, json.cards[0]],\n            dealerScore: (this.state.dealerScore += newValue)\n          });\n          this.handleStandEvent();\n        });\n    } else {\n      // Check winner because dealer did not bust and has 17 or above\n      this.setState({\n        playerPlaying: false\n      });\n      this.checkWinner();\n    };\n  };\n\n  // When player clicks DOUBLE DOWN\n  handleDoubleDownEvent = event => {\n    // Handle Double Down Bet\n    if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You do not have enough to double down!\"\n      });\n    } else {\n      this.setState({\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.chipsInPlay + this.state.betAmount\n      });\n      if (this.state.playerScore < 21) {\n        fetch(\n          `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n        )\n          .then(res => res.json())\n          .then(json => {\n            const newValue = this.returnValue(json.cards[0].value);\n            // Check if new card is an ace\n            if (newValue === 11) {\n              this.setState({\n                playerHasAce: true\n              });\n            };\n            this.setState({\n              playerHand: [...this.state.playerHand, json.cards[0]],\n              playerScore: (this.state.playerScore += newValue),\n              playerPlaying: false\n            });\n            // Check if the double down was a bust, if it was a bust do not execute auto hits for dealer\n            this.bustChecker();\n            if (this.state.playerScore <= 21) {\n              this.handleStandEvent();\n            };\n          });\n      };\n    };\n  };\n\n  // When player clicks SPLIT\n  handleSplitEvent = event => {\n    this.setState({\n      dealerSplit: false,\n    });\n  };\n\n  // When player clicks DEAL reset the hand states but not the game states\n  handleDealEvent = event => {\n    this.setState({\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      gameMessage: \"\"\n    });\n    this.handleDealHand();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"gameHeader\">\n          <h1>Blackjack</h1>\n          <h3>Dealer stands on 17</h3>\n          {/* If game isn't started show Start Game button else show New Deck */}\n          {this.state.gameStarted ? (\n            <div>\n              <button className=\"lg red\" onClick={() => this.handleEndGame()}>\n                New Deck\n              </button>\n            </div>\n          ) : (\n            <button className=\"lg\" onClick={() => this.handleDealHand()}>\n              Start Game\n            </button>\n          )}\n          <Chips \n            playerChips={this.state.playerChips}\n            betAmount={this.state.betAmount}\n            chipsInPlay={this.state.chipsInPlay}\n            winAmount={this.state.winAmount}\n            playerPlaying={this.state.playerPlaying}\n            gameStarted={this.state.gameStarted}\n            // Increase Chips Functions\n            increaseChipOne={this.increaseChipOne}\n            increaseChipFive={this.increaseChipFive}\n            increaseChipTen={this.increaseChipTen}\n            increaseChipTwentyFive={this.increaseChipTwentyFive}\n            clearChips={this.clearChips}\n            // Bet Functions\n            increaseBetOne={this.increaseBetOne}\n            increaseBetFive={this.increaseBetFive}\n            increaseBetTen={this.increaseBetTen}\n            increaseBetTwentyFive={this.increaseBetTwentyFive}\n            clearBets={this.clearBets}\n\n          />  \n        </div>\n        {this.state.gameStarted ? (\n          <div className=\"hands-container\">\n            <Hand\n              name=\"Player\"\n              cards={this.state.playerHand}\n              score={this.state.playerScore}\n              playerPlaying={this.state.playerPlaying}\n              playerSplittable={this.state.playerSplittable}\n              handleSplitEvent={this.handleSplitEvent}\n              handleDrawCardEvent={this.handleDrawCardEvent}\n              handleStandEvent={this.handleStandEvent}\n              handleDealEvent={this.handleDealEvent}\n              handleDoubleDownEvent={this.handleDoubleDownEvent}\n            />\n            <Hand\n              name=\"Dealer\"\n              cards={this.state.dealerHand}\n              score={this.state.dealerScore}\n              playerPlaying={this.state.playerPlaying}\n              dealerInitialScore={this.state.dealerInitialScore}\n            />\n          </div>\n        ) : (\n          \"\"\n        )}\n      <Stats \n        playerWins={this.state.playerWins}\n        dealerWins={this.state.dealerWins}\n        playerBlackjacks={this.state.playerBlackjacks}\n        dealerBlackjacks={this.state.dealerBlackjacks}\n        playerBusts={this.state.playerBusts}\n        dealerBusts={this.state.dealerBusts}\n        pushes={this.state.pushes}\n      />\n      <h3>{this.state.gameMessage}</h3>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/blankCard.3b5d8172.jpg\";"],"sourceRoot":""}