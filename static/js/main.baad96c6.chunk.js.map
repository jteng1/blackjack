{"version":3,"sources":["components/Card.jsx","components/Hand.jsx","components/Stats.jsx","components/Chips.jsx","App.js","index.js","images/blankCard.jpg"],"names":["Card","state","value","_this","props","card","suit","code","image","react_default","a","createElement","className","src","this","alt","Component","Hand","cards","length","map","Card_Card","key","history","name","playerPlaying","dealerInitialScore","score","blankCard","onClick","event","handleDrawCardEvent","handleStandEvent","handleDoubleDownEvent","handleDealEvent","Stats","totalHands","playerWins","dealerWins","pushes","playerWinPercent","Math","floor","dealerWinPercent","playerBlackjacks","playerBusts","dealerBlackjacks","dealerBusts","Chips","gameStarted","increaseChipOne","increaseChipFive","increaseChipTen","increaseChipTwentyFive","increaseChipHundred","clearChips","playerChips","toFixed","betAmount","increaseBetOne","increaseBetFive","increaseBetTen","increaseBetTwentyFive","increaseBetHundred","increaseBetAllIn","clearBets","chipsInPlay","winAmount","initialBuy","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","gameMessage","playerScore","fetch","concat","deckId","then","res","json","newValue","returnValue","playerHasAce","playerSplittable","playerHand","toConsumableArray","bustChecker","catch","err","console","log","dealerScore","dealerHasAce","dealerHand","checkWinner","handleSplitEvent","dealerSplit","dealerHasBlackjack","insurance","playerHasBlackjack","handleDealHand","_this2","deck_id","_this3","ACE","KING","QUEEN","JACK","10","9","8","7","6","5","4","3","2","_this4","remaining","value0","value1","value2","value3","blackJackChecker","_this5","handleEndGame","Hand_Hand","Chips_Chips","Stats_Stats","ReactDOM","render","App_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.baad96c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n  state = {\n    value: this.props.card.value,\n    suit: this.props.card.suit,\n    code: this.props.card.code,\n    image: this.props.card.image\n  };\n\n  render() {\n    return (\n      <div className=\"Card\">\n        <img src={this.state.image} alt=\"Card\" />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card.jsx';\n\nimport blankCard from '../images/blankCard.jpg';\n\nexport default class Hand extends Component {\n  render() {\n    let cards;\n    if (this.props.cards.length) {\n      cards = this.props.cards.map(card => (\n        <Card key={card.code} card={card} history={this.props.history} />\n      ));\n    }\n\n    return (\n      <div className='Hand'>\n        {this.props.name === 'Dealer' ? (\n          <div className='hand-container'>\n            {this.props.playerPlaying ? (\n              <h3>\n                {this.props.name} {this.props.dealerInitialScore}\n              </h3>\n            ) : (\n              <h3>\n                {this.props.name} {this.props.score}\n              </h3>\n            )}\n            {/* If the player is playing, then the first card of the dealer is hidden */}\n            {this.props.playerPlaying ? (\n              <div className='cards-container'>\n                <img src={blankCard} alt='cardback' className='blankCard' />\n                {cards[1]}\n              </div>\n            ) : (\n              <div className='cards-container'>{cards}</div>\n            )}\n          </div>\n        ) : (\n          <div className='hand-container'>\n            <h3>\n              {this.props.name} {this.props.score}\n            </h3>\n            <div className='cards-container'>{cards}</div>\n            {this.props.playerPlaying ? (\n              <div className='playingButtons'>\n                <button\n                  className='sm'\n                  onClick={event => this.props.handleDrawCardEvent(event)}\n                >\n                  Hit\n                </button>\n                <button\n                  className='sm'\n                  onClick={event => this.props.handleStandEvent(event)}\n                >\n                  Stand\n                </button>\n                {this.props.cards.length === 2 ? (\n                  <button\n                    className='sm'\n                    onClick={event => this.props.handleDoubleDownEvent(event)}\n                  >\n                    Double Down\n                  </button>\n                ) : (\n                  ''\n                )}\n                {/* Show split button when both cards are the same value - NOT IMPLEMENTED YET*/}\n                {/* {this.props.playerSplittable ? (\n                            <button\n                            className=\"sm\"\n                            onClick={event => this.props.handleSplitEvent(event)}\n                            >\n                            Split\n                            </button>\n                        ) : (\n                            \"\"\n                        )} */}\n              </div>\n            ) : (\n              <button\n                className='sm'\n                onClick={event => this.props.handleDealEvent(event)}\n              >\n                Deal\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Stats extends Component {\n  \n    render() {\n\n    var totalHands = this.props.playerWins + this.props.dealerWins + this.props.pushes;\n    var playerWinPercent = Math.floor(this.props.playerWins/totalHands*100);\n    var dealerWinPercent = Math.floor(this.props.dealerWins/totalHands*100);\n\n    return (\n      <div className=\"stats-container\">\n        <div className=\"playerStats\">\n            <p>Player Wins: {this.props.playerWins}</p>\n            <p>Player Win Percentage: {playerWinPercent ? (playerWinPercent) : (\"0\")}%</p>\n            <p>Player Blackjacks: {this.props.playerBlackjacks}</p>\n            <p>Player Busts: {this.props.playerBusts}</p>\n        </div>\n        <div className=\"gameStats\">\n            <p>Pushes: {this.props.pushes}</p>\n            <p>Total Hands: {totalHands}</p>\n        </div>\n        <div className=\"dealerStats\">\n            <p>Dealer Wins: {this.props.dealerWins}</p>\n            <p>Dealer Win Percentage: {dealerWinPercent ? (dealerWinPercent) : (\"0\")}%</p>\n            <p>Dealer Blackjacks: {this.props.dealerBlackjacks}</p>\n            <p>Dealer Busts: {this.props.dealerBusts}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Chips extends Component {\n  render() {\n    return (\n      <div className='chips-container'>\n        {/* If game is not started then show player chips buttons */}\n        {this.props.gameStarted === false ? (\n          <div className='buyInButtons'>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipOne(event)}\n            >\n              $1\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipFive(event)}\n            >\n              $5\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipTen(event)}\n            >\n              $10\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipTwentyFive(event)}\n            >\n              $25\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipHundred(event)}\n            >\n              $100\n            </button>\n            <button\n              className='sm red'\n              onClick={event => this.props.clearChips(event)}\n            >\n              Clear Chips\n            </button>\n            <h1>Buy-In Amount</h1>\n            <h1>${this.props.playerChips.toFixed(2)}</h1>\n            <h1>Initial Bet</h1>\n            <h1>${this.props.betAmount.toFixed(2)}</h1>\n            <div className='chipBets'>\n              {/* If player is not playing AND playerChips is not zero then show bet buttons */}\n              {this.props.playerPlaying === false &&\n              this.props.playerChips !== 0 ? (\n                <div className='chipButtons'>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetOne(event)}\n                  >\n                    $1\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetFive(event)}\n                  >\n                    $5\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTen(event)}\n                  >\n                    $10\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTwentyFive(event)}\n                  >\n                    $25\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetHundred(event)}\n                  >\n                    $100\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetAllIn(event)}\n                  >\n                    Max Bet\n                  </button>\n                  <button\n                    className='sm red'\n                    onClick={event => this.props.clearBets(event)}\n                  >\n                    Clear Bets\n                  </button>\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className='chipStats'>\n            <div className='chipBets'>\n              {/* If player is not playing AND playerChips is not zero then show bet buttons */}\n              {this.props.playerPlaying === false &&\n              this.props.playerChips !== 0 ? (\n                <div className='chipButtons'>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetOne(event)}\n                  >\n                    $1\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetFive(event)}\n                  >\n                    $5\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTen(event)}\n                  >\n                    $10\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTwentyFive(event)}\n                  >\n                    $25\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetHundred(event)}\n                  >\n                    $100\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetAllIn(event)}\n                  >\n                    Max Bet\n                  </button>\n                  <button\n                    className='sm red'\n                    onClick={event => this.props.clearBets(event)}\n                  >\n                    Clear Bets\n                  </button>\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n            <h2>Bet ${this.props.betAmount.toFixed(2)}</h2>\n            <h2>Player Chips ${this.props.playerChips.toFixed(2)}</h2>\n            <h5>Chips in Play $ {this.props.chipsInPlay.toFixed(2)}</h5>\n            <h5>Win Amount $ {this.props.winAmount.toFixed(2)}</h5>\n            <h3>Initial Buy-In $ {this.props.initialBuy.toFixed(2)}</h3>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Hand from './components/Hand.jsx';\nimport Stats from './components/Stats.jsx';\nimport Chips from './components/Chips.jsx';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    // Set the initial state of the application\n    this.state = {\n      // Game states\n      gameStarted: false,\n      playerPlaying: false,\n      deckId: '',\n      // Dealer options and flags\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      // Player options and flags\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: '',\n      // Betting options and flags\n      initialBuy: 0,\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0\n    };\n  }\n\n  // Fetches deck(s) from Deck of Cards API\n  componentDidMount() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          deckId: json.deck_id\n        });\n      });\n  }\n\n  // When End Game is pressed a new deck is drawn, reset state to initial state\n  handleEndGame() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          deckId: json.deck_id\n        });\n      });\n    this.setState({\n      gameStarted: false,\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: '',\n      // Betting options and flags\n      initialBuy: 0,\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0\n    });\n  }\n\n  // Handle Buying In Chips Increase buttons\n  increaseChipOne = event => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 1,\n      playerChips: this.state.playerChips + 1\n    });\n  };\n\n  increaseChipFive = event => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 5,\n      playerChips: this.state.playerChips + 5\n    });\n  };\n\n  increaseChipTen = event => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 10,\n      playerChips: this.state.playerChips + 10\n    });\n  };\n\n  increaseChipTwentyFive = event => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 25,\n      playerChips: this.state.playerChips + 25\n    });\n  };\n\n  increaseChipHundred = event => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 100,\n      playerChips: this.state.playerChips + 100\n    });\n  };\n\n  clearChips = event => {\n    this.setState({\n      initialBuy: 0,\n      playerChips: 0\n    });\n  };\n\n  // Handle Betting buttons\n  increaseBetOne = event => {\n    if (this.state.betAmount + 1 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 1\n      });\n    }\n  };\n\n  increaseBetFive = event => {\n    if (this.state.betAmount + 5 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 5\n      });\n    }\n  };\n\n  increaseBetTen = event => {\n    if (this.state.betAmount + 10 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 10\n      });\n    }\n  };\n\n  increaseBetTwentyFive = event => {\n    if (this.state.betAmount + 25 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 25\n      });\n    }\n  };\n\n  increaseBetHundred = event => {\n    if (this.state.betAmount + 100 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 100\n      });\n    }\n  };\n\n  increaseBetAllIn = event => {\n    this.setState({\n      betAmount: this.state.playerChips\n    });\n  };\n\n  clearBets = event => {\n    this.setState({\n      betAmount: 0\n    });\n  };\n\n  // Return corresponding blackjack value from input card value\n  returnValue(value) {\n    const cardValues = {\n      ACE: 11,\n      KING: 10,\n      QUEEN: 10,\n      JACK: 10,\n      '10': 10,\n      '9': 9,\n      '8': 8,\n      '7': 7,\n      '6': 6,\n      '5': 5,\n      '4': 4,\n      '3': 3,\n      '2': 2\n    };\n\n    return cardValues[value];\n  }\n\n  // Handle the initial hand deal, i.e. when Start Game is clicked or when Deal is clicked\n  handleDealHand() {\n    // If player bet is zero\n    if (this.state.betAmount === 0) {\n      this.setState({\n        gameMessage: 'You have to bet some money!'\n      });\n    } else if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: 'You do not have that much money'\n      });\n    } else {\n      // Deal with initial betting\n      this.setState({\n        betAmount: this.state.betAmount,\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.betAmount,\n        gameMessage: 'Choose an action...',\n        winAmount: 0\n      });\n      // Draw 4 cards from the deck\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=4`\n      )\n        .then(res => res.json())\n        .then(json => {\n          // Check remaining cards and shuffle deck if remaining cards is less than 100 cards, or 25% of deck\n          console.log(json.remaining);\n          if (json.remaining < 100) {\n            fetch(\n              `https://deckofcardsapi.com/api/deck/${this.state.deckId}/shuffle/`\n            )\n              .then(res => res.json())\n              .then(json => {\n                console.log(json);\n                console.log('Deck reshuffled!');\n              });\n          }\n\n          // Return blackjack values of json card values\n          const value0 = this.returnValue(json.cards[0].value);\n          const value1 = this.returnValue(json.cards[1].value);\n          const value2 = this.returnValue(json.cards[2].value);\n          const value3 = this.returnValue(json.cards[3].value);\n\n          // Check if the player has two Aces first or just an Ace, or else set default state\n          if (value0 === 11 && value2 === 11) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerHasAce: true,\n              playerSplittable: true,\n              playerScore: 12,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          } else if (value0 === 11 || value2 === 11) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              playerHasAce: true,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          } else if (value0 === value2) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerSplittable: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          } else {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          }\n          // Check if dealer has two aces or an ace\n          if (value1 === 11 && value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n              dealerScore: 12,\n              insurance: true\n              // gameMessage: 'Insurance?'\n            });\n          } else if (value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n              insurance: true\n              // gameMessage: 'Insurance?'\n            });\n          } else if (value1 === 11 || value3 === 11) {\n            this.setState({\n              dealerHasAce: true\n            });\n          }\n          // After the ace checks\n          this.blackJackChecker();\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  // Checks for blackjack\n  blackJackChecker() {\n    // Check for player blackjack\n    if (\n      this.returnValue(this.state.playerHand[0].value) === 10 &&\n      this.returnValue(this.state.playerHand[1].value) === 11\n    ) {\n      this.setState({\n        playerHasBlackjack: true\n      });\n    } else if (\n      this.returnValue(this.state.playerHand[1].value) === 10 &&\n      this.returnValue(this.state.playerHand[0].value) === 11\n    ) {\n      this.setState({\n        playerHasBlackjack: true\n      });\n    }\n\n    // Check for dealer blackjack\n    if (\n      this.returnValue(this.state.dealerHand[0].value) === 10 &&\n      this.returnValue(this.state.dealerHand[1].value) === 11\n    ) {\n      this.setState({\n        dealerHasBlackjack: true\n      });\n    } else if (\n      this.returnValue(this.state.dealerHand[1].value) === 10 &&\n      this.returnValue(this.state.dealerHand[0].value) === 11\n    ) {\n      this.setState({\n        dealerHasBlackjack: true\n      });\n    }\n\n    // Check who has blackjacks and award chips accordingly\n    if (this.state.playerHasBlackjack && this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        pushes: this.state.pushes + 1,\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'Push! You both have a Blackjack!'\n      });\n    } else if (this.state.playerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        playerWins: this.state.playerWins + 1,\n        playerBlackjacks: this.state.playerBlackjacks + 1,\n        playerChips:\n          this.state.playerChips +\n          this.state.betAmount +\n          (3 * this.state.chipsInPlay) / 2,\n        winAmount: (3 * this.state.chipsInPlay) / 2,\n        chipsInPlay: 0,\n        gameMessage: 'Blackjack!'\n      });\n    } else if (this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        dealerBlackjacks: this.state.dealerBlackjacks + 1,\n        chipsInPlay: 0,\n        gameMessage: 'Dealer has a Blackjack!'\n      });\n    }\n  }\n\n  // Checks if the player bust, if there is an ace in hand subtract 10 and set playerHasAce to false\n  bustChecker() {\n    if (this.state.playerHasAce && this.state.playerScore > 21) {\n      this.setState({\n        playerScore: this.state.playerScore - 10,\n        playerHasAce: false\n      });\n    } else if (this.state.playerScore > 21) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        playerBusts: this.state.playerBusts + 1,\n        chipsInPlay: 0,\n        gameMessage: 'You Busted!'\n      });\n    }\n  }\n\n  // Determines winner of hand\n  checkWinner() {\n    if (this.state.dealerScore > 21) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        dealerBusts: this.state.dealerBusts + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'Dealer busts, you win!'\n      });\n    } else if (\n      this.state.playerScore > this.state.dealerScore &&\n      this.state.playerScore <= 21\n    ) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: `You win!`\n      });\n    } else if (this.state.playerScore === this.state.dealerScore) {\n      this.setState({\n        // Set statistics\n        pushes: this.state.pushes + 1,\n        // Set chips, return original chips in play if push\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'You pushed!'\n      });\n    } else {\n      this.setState({\n        // Set statistics\n        dealerWins: this.state.dealerWins + 1,\n        // Set chips\n        chipsInPlay: 0,\n        gameMessage: 'You lost!'\n      });\n    }\n  }\n\n  // When player clicks HIT\n  handleDrawCardEvent = event => {\n    if (this.state.playerScore < 21) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then(res => res.json())\n        .then(json => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if player hits multiple aces\n          if (newValue === 11 && this.state.playerHasAce) {\n            this.setState({\n              playerScore: this.state.playerScore - 10,\n              playerHasAce: true,\n              playerSplittable: false\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              playerHasAce: true,\n              playerSplittable: false\n            });\n          }\n          // Otherwise update player hand and player score from response\n          this.setState({\n            playerHand: [...this.state.playerHand, json.cards[0]],\n            playerScore: this.state.playerScore + newValue,\n            playerSplittable: false\n          });\n          this.bustChecker();\n        })\n        .catch(err => console.log(err));\n    }\n  };\n\n  // When player clicks STAND, execute dealer hits less than 17\n  handleStandEvent = event => {\n    // If the dealer has an ace and is greater than 21, subtract 10 and set the ace flag to false, recursively call itself\n    if (this.state.dealerScore > 21 && this.state.dealerHasAce) {\n      this.setState({\n        dealerScore: this.state.dealerScore - 10,\n        dealerHasAce: false\n      });\n      this.handleStandEvent();\n    } else if (this.state.dealerScore < 17) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then(res => res.json())\n        .then(json => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if dealer hits multiple aces\n          if (newValue === 11 && this.state.dealerHasAce) {\n            this.setState({\n              dealerScore: this.state.dealerScore - 10,\n              dealerHasAce: true\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              dealerHasAce: true\n            });\n          }\n          this.setState({\n            playerPlaying: false,\n            dealerHand: [...this.state.dealerHand, json.cards[0]],\n            dealerScore: this.state.dealerScore + newValue\n          });\n          this.handleStandEvent();\n        });\n    } else {\n      // Check winner because dealer did not bust and has 17 or above\n      this.setState({\n        playerPlaying: false\n      });\n      this.checkWinner();\n    }\n  };\n\n  // When player clicks DOUBLE DOWN\n  handleDoubleDownEvent = event => {\n    // Handle Double Down Bet\n    if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: 'You do not have enough to double down!'\n      });\n    } else {\n      this.setState({\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.chipsInPlay + this.state.betAmount\n      });\n      if (this.state.playerScore < 21) {\n        fetch(\n          `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n        )\n          .then(res => res.json())\n          .then(json => {\n            const newValue = this.returnValue(json.cards[0].value);\n            // Check if new card is an ace\n            if (newValue === 11) {\n              this.setState({\n                playerHasAce: true\n              });\n            }\n            this.setState({\n              playerHand: [...this.state.playerHand, json.cards[0]],\n              playerScore: this.state.playerScore + newValue,\n              playerPlaying: false\n            });\n            // Check if the double down was a bust, if it was a bust do not execute auto hits for dealer\n            this.bustChecker();\n            if (this.state.playerScore <= 21) {\n              this.handleStandEvent();\n            }\n          });\n      }\n    }\n  };\n\n  // When player clicks SPLIT\n  handleSplitEvent = event => {\n    this.setState({\n      dealerSplit: false\n    });\n  };\n\n  // When player clicks DEAL reset the hand states but not the game states\n  handleDealEvent = event => {\n    this.setState({\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      gameMessage: ''\n    });\n    this.handleDealHand();\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='gameHeader'>\n          <h1>Blackjack</h1>\n          {/* If game isn't started show Start Game button else show New Deck */}\n          {this.state.gameStarted ? (\n            <div>\n              <button className='lg red' onClick={() => this.handleEndGame()}>\n                New Game\n              </button>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        {this.state.gameMessage ? (\n          <h2>{this.state.gameMessage}</h2>\n        ) : (\n          <h2>Welcome to Blackjack! Please buy in and place a bet</h2>\n        )}\n        {this.state.gameStarted ? (\n          <div className='hands-container'>\n            <Hand\n              name='Dealer'\n              cards={this.state.dealerHand}\n              score={this.state.dealerScore}\n              playerPlaying={this.state.playerPlaying}\n              dealerInitialScore={this.state.dealerInitialScore}\n            />\n            <Hand\n              name='Player'\n              cards={this.state.playerHand}\n              score={this.state.playerScore}\n              playerPlaying={this.state.playerPlaying}\n              playerSplittable={this.state.playerSplittable}\n              handleSplitEvent={this.handleSplitEvent}\n              handleDrawCardEvent={this.handleDrawCardEvent}\n              handleStandEvent={this.handleStandEvent}\n              handleDealEvent={this.handleDealEvent}\n              handleDoubleDownEvent={this.handleDoubleDownEvent}\n            />\n          </div>\n        ) : (\n          ''\n        )}\n        <Chips\n          playerChips={this.state.playerChips}\n          betAmount={this.state.betAmount}\n          initialBuy={this.state.initialBuy}\n          chipsInPlay={this.state.chipsInPlay}\n          winAmount={this.state.winAmount}\n          playerPlaying={this.state.playerPlaying}\n          gameStarted={this.state.gameStarted}\n          // Increase Chips Functions\n          increaseChipOne={this.increaseChipOne}\n          increaseChipFive={this.increaseChipFive}\n          increaseChipTen={this.increaseChipTen}\n          increaseChipTwentyFive={this.increaseChipTwentyFive}\n          increaseChipHundred={this.increaseChipHundred}\n          clearChips={this.clearChips}\n          // Bet Functions\n          increaseBetOne={this.increaseBetOne}\n          increaseBetFive={this.increaseBetFive}\n          increaseBetTen={this.increaseBetTen}\n          increaseBetTwentyFive={this.increaseBetTwentyFive}\n          increaseBetHundred={this.increaseBetHundred}\n          increaseBetAllIn={this.increaseBetAllIn}\n          clearBets={this.clearBets}\n        />\n        {!this.state.gameStarted ? (\n          <button className='lg' onClick={() => this.handleDealHand()}>\n            Deal!\n          </button>\n        ) : (\n          ''\n        )}\n        <Stats\n          playerWins={this.state.playerWins}\n          dealerWins={this.state.dealerWins}\n          playerBlackjacks={this.state.playerBlackjacks}\n          dealerBlackjacks={this.state.dealerBlackjacks}\n          playerBusts={this.state.playerBusts}\n          dealerBusts={this.state.dealerBusts}\n          pushes={this.state.pushes}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/blankCard.3b5d8172.jpg\";"],"sourceRoot":""}