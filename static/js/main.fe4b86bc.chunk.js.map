{"version":3,"sources":["components/Card.jsx","components/Hand.jsx","components/Stats.jsx","components/Chips.jsx","App.js","serviceWorker.js","index.js","images/blankCard.jpg"],"names":["Card","state","value","_this","props","card","suit","code","image","react_default","a","createElement","className","src","this","alt","Component","Hand","cards","length","map","Card_Card","key","history","name","playerPlaying","dealerInitialScore","score","blankCard","onClick","event","handleDrawCardEvent","handleStandEvent","handleDoubleDownEvent","handleDealEvent","Stats","totalHands","playerWins","dealerWins","pushes","playerWinPercent","Math","floor","dealerWinPercent","playerBlackjacks","playerBusts","dealerBlackjacks","dealerBusts","Chips","gameStarted","increaseChipOne","increaseChipFive","increaseChipTen","increaseChipTwentyFive","clearChips","playerChips","toFixed","betAmount","increaseBetOne","increaseBetFive","increaseBetTen","increaseBetTwentyFive","clearBets","chipsInPlay","winAmount","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","gameMessage","playerScore","fetch","concat","deckId","then","res","json","newValue","returnValue","playerHasAce","playerSplittable","playerHand","toConsumableArray","bustChecker","catch","err","console","log","dealerScore","dealerHasAce","dealerHand","checkWinner","handleSplitEvent","dealerSplit","dealerHasBlackjack","insurance","playerHasBlackjack","handleDealHand","_this2","deck_id","_this3","ACE","KING","QUEEN","JACK","10","9","8","7","6","5","4","3","2","_this4","remaining","value0","value1","value2","value3","blackJackChecker","_this5","handleEndGame","Hand_Hand","Chips_Chips","Stats_Stats","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fe4b86bc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n  state = {\n    value: this.props.card.value,\n    suit: this.props.card.suit,\n    code: this.props.card.code,\n    image: this.props.card.image\n  };\n\n  render() {\n    return (\n      <div className=\"Card\">\n        <img src={this.state.image} alt=\"Card\" />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card.jsx';\n\nimport blankCard from '../images/blankCard.jpg';\n\nexport default class Hand extends Component {\n  render() {\n    let cards;\n    if (this.props.cards.length) {\n      cards = this.props.cards.map(card => (\n        <Card key={card.code} card={card} history={this.props.history} />\n      ));\n    }\n\n    return (\n      <div className='Hand'>\n        {this.props.name === 'Dealer' ? (\n          <div className='hand-container'>\n            {this.props.playerPlaying ? (\n              <h3>\n                {this.props.name} {this.props.dealerInitialScore}\n              </h3>\n            ) : (\n              <h3>\n                {this.props.name} {this.props.score}\n              </h3>\n            )}\n            {/* If the player is playing, then the first card of the dealer is hidden */}\n            {this.props.playerPlaying ? (\n              <div className='cards-container'>\n                <img src={blankCard} alt='cardback' className='blankCard' />\n                {cards[1]}\n              </div>\n            ) : (\n              <div className='cards-container'>{cards}</div>\n            )}\n          </div>\n        ) : (\n          <div className='hand-container'>\n            <h3>\n              {this.props.name} {this.props.score}\n            </h3>\n            <div className='cards-container'>{cards}</div>\n            {this.props.playerPlaying ? (\n              <div className='playingButtons'>\n                <button\n                  className='sm'\n                  onClick={event => this.props.handleDrawCardEvent(event)}\n                >\n                  Hit\n                </button>\n                <button\n                  className='sm'\n                  onClick={event => this.props.handleStandEvent(event)}\n                >\n                  Stand\n                </button>\n                {this.props.cards.length === 2 ? (\n                  <button\n                    className='sm'\n                    onClick={event => this.props.handleDoubleDownEvent(event)}\n                  >\n                    Double Down\n                  </button>\n                ) : (\n                  ''\n                )}\n                {/* Show split button when both cards are the same value - NOT IMPLEMENTED YET*/}\n                {/* {this.props.playerSplittable ? (\n                            <button\n                            className=\"sm\"\n                            onClick={event => this.props.handleSplitEvent(event)}\n                            >\n                            Split\n                            </button>\n                        ) : (\n                            \"\"\n                        )} */}\n              </div>\n            ) : (\n              <button\n                className='sm'\n                onClick={event => this.props.handleDealEvent(event)}\n              >\n                Deal\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Stats extends Component {\n  \n    render() {\n\n    var totalHands = this.props.playerWins + this.props.dealerWins + this.props.pushes;\n    var playerWinPercent = Math.floor(this.props.playerWins/totalHands*100);\n    var dealerWinPercent = Math.floor(this.props.dealerWins/totalHands*100);\n\n    return (\n      <div className=\"stats-container\">\n        <div className=\"playerStats\">\n            <p>Player Wins: {this.props.playerWins}</p>\n            <p>Player Win Percentage: {playerWinPercent ? (playerWinPercent) : (\"0\")}%</p>\n            <p>Player Blackjacks: {this.props.playerBlackjacks}</p>\n            <p>Player Busts: {this.props.playerBusts}</p>\n        </div>\n        <div className=\"gameStats\">\n            <p>Pushes: {this.props.pushes}</p>\n            <p>Total Hands: {totalHands}</p>\n        </div>\n        <div className=\"dealerStats\">\n            <p>Dealer Wins: {this.props.dealerWins}</p>\n            <p>Dealer Win Percentage: {dealerWinPercent ? (dealerWinPercent) : (\"0\")}%</p>\n            <p>Dealer Blackjacks: {this.props.dealerBlackjacks}</p>\n            <p>Dealer Busts: {this.props.dealerBusts}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Chips extends Component {\n  render() {\n    return (\n      <div className='chips-container'>\n        {/* If game is not started then show player chips buttons */}\n        {this.props.gameStarted === false ? (\n          <div className='buyInButtons'>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipOne(event)}\n            >\n              $1\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipFive(event)}\n            >\n              $5\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipTen(event)}\n            >\n              $10\n            </button>\n            <button\n              className='sm'\n              onClick={event => this.props.increaseChipTwentyFive(event)}\n            >\n              $25\n            </button>\n            <button\n              className='sm red'\n              onClick={event => this.props.clearChips(event)}\n            >\n              Clear Chips\n            </button>\n            <h1>Buy-In Amount</h1>\n            <h1>${this.props.playerChips.toFixed(2)}</h1>\n            <h1>Initial Bet</h1>\n            <h1>${this.props.betAmount.toFixed(2)}</h1>\n            <div className='chipBets'>\n              {/* If player is not playing AND playerChips is not zero then show bet buttons */}\n              {this.props.playerPlaying === false &&\n              this.props.playerChips !== 0 ? (\n                <div className='chipButtons'>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetOne(event)}\n                  >\n                    $1\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetFive(event)}\n                  >\n                    $5\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTen(event)}\n                  >\n                    $10\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTwentyFive(event)}\n                  >\n                    $25\n                  </button>\n                  <button\n                    className='sm red'\n                    onClick={event => this.props.clearBets(event)}\n                  >\n                    Clear Bets\n                  </button>\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className='chipStats'>\n            <div className='chipBets'>\n              {/* If player is not playing AND playerChips is not zero then show bet buttons */}\n              {this.props.playerPlaying === false &&\n              this.props.playerChips !== 0 ? (\n                <div className='chipButtons'>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetOne(event)}\n                  >\n                    $1\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetFive(event)}\n                  >\n                    $5\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTen(event)}\n                  >\n                    $10\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={event => this.props.increaseBetTwentyFive(event)}\n                  >\n                    $25\n                  </button>\n                  <button\n                    className='sm red'\n                    onClick={event => this.props.clearBets(event)}\n                  >\n                    Clear Bets\n                  </button>\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n            <h3>Bet ${this.props.betAmount.toFixed(2)}</h3>\n            <h3>Player Chips ${this.props.playerChips.toFixed(2)}</h3>\n            <p>Chips in Play: $ {this.props.chipsInPlay.toFixed(2)}</p>\n            <p>Win Amount: $ {this.props.winAmount.toFixed(2)}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Hand from './components/Hand.jsx';\nimport Stats from './components/Stats.jsx';\nimport Chips from './components/Chips.jsx';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    // Set the initial state of the application\n    this.state = {\n      // Game states\n      gameStarted: false,\n      playerPlaying: false,\n      deckId: '',\n      // Dealer options and flags\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      // Player options and flags\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: '',\n      // Betting options and flags\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0\n    };\n  }\n\n  // Fetches deck(s) from Deck of Cards API\n  componentDidMount() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          deckId: json.deck_id\n        });\n      });\n  }\n\n  // When End Game is pressed a new deck is drawn, reset state to initial state\n  handleEndGame() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          deckId: json.deck_id\n        });\n      });\n    this.setState({\n      gameStarted: false,\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: '',\n      // Betting options and flags\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0\n    });\n  }\n\n  // Handle Chips Increase buttons\n  increaseChipOne = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 1\n    });\n  };\n\n  increaseChipFive = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 5\n    });\n  };\n\n  increaseChipTen = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 10\n    });\n  };\n\n  increaseChipTwentyFive = event => {\n    this.setState({\n      playerChips: this.state.playerChips + 25\n    });\n  };\n\n  clearChips = event => {\n    this.setState({\n      playerChips: 0\n    });\n  };\n\n  // Handle Betting buttons\n  increaseBetOne = event => {\n    if (this.state.betAmount + 1 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 1\n      });\n    }\n  };\n\n  increaseBetFive = event => {\n    if (this.state.betAmount + 5 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 5\n      });\n    }\n  };\n\n  increaseBetTen = event => {\n    if (this.state.betAmount + 10 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 10\n      });\n    }\n  };\n\n  increaseBetTwentyFive = event => {\n    if (this.state.betAmount + 25 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\"\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 25\n      });\n    }\n  };\n\n  clearBets = event => {\n    this.setState({\n      betAmount: 0\n    });\n  };\n\n  // Return corresponding blackjack value from input card value\n  returnValue(value) {\n    const cardValues = {\n      ACE: 11,\n      KING: 10,\n      QUEEN: 10,\n      JACK: 10,\n      '10': 10,\n      '9': 9,\n      '8': 8,\n      '7': 7,\n      '6': 6,\n      '5': 5,\n      '4': 4,\n      '3': 3,\n      '2': 2\n    };\n\n    return cardValues[value];\n  }\n\n  // Handle the initial hand deal, i.e. when Start Game is clicked or when Deal is clicked\n  handleDealHand() {\n    // If player bet is zero\n    if (this.state.betAmount === 0) {\n      this.setState({\n        gameMessage: 'You have to bet some money!'\n      });\n    } else if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: 'You do not have that much money'\n      });\n    } else {\n      // Deal with initial betting\n      this.setState({\n        betAmount: this.state.betAmount,\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.betAmount,\n        gameMessage: 'Choose an action...',\n        winAmount: 0\n      });\n      // Draw 4 cards from the deck\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=4`\n      )\n        .then(res => res.json())\n        .then(json => {\n          // Check remaining cards and shuffle deck if remaining cards is less than 100 cards, or 25% of deck\n          console.log(json.remaining);\n          if (json.remaining < 100) {\n            fetch(\n              `https://deckofcardsapi.com/api/deck/${this.state.deckId}/shuffle/`\n            )\n              .then(res => res.json())\n              .then(json => {\n                console.log(json);\n                console.log('Deck reshuffled!');\n              });\n          }\n\n          // Return blackjack values of json card values\n          const value0 = this.returnValue(json.cards[0].value);\n          const value1 = this.returnValue(json.cards[1].value);\n          const value2 = this.returnValue(json.cards[2].value);\n          const value3 = this.returnValue(json.cards[3].value);\n\n          // Check if the player has two Aces first or just an Ace, or else set default state\n          if (value0 === 11 && value2 === 11) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerHasAce: true,\n              playerSplittable: true,\n              playerScore: 12,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          } else if (value0 === 11 || value2 === 11) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              playerHasAce: true,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          } else if (value0 === value2) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerSplittable: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          } else {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2]\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3]\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3\n            });\n          }\n          // Check if dealer has two aces or an ace\n          if (value1 === 11 && value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n              dealerScore: 12,\n              insurance: true\n              // gameMessage: 'Insurance?'\n            });\n          } else if (value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n              insurance: true\n              // gameMessage: 'Insurance?'\n            });\n          } else if (value1 === 11 || value3 === 11) {\n            this.setState({\n              dealerHasAce: true\n            });\n          }\n          // After the ace checks\n          this.blackJackChecker();\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  // Checks for blackjack\n  blackJackChecker() {\n    // Check for player blackjack\n    if (\n      this.returnValue(this.state.playerHand[0].value) === 10 &&\n      this.returnValue(this.state.playerHand[1].value) === 11\n    ) {\n      this.setState({\n        playerHasBlackjack: true\n      });\n    } else if (\n      this.returnValue(this.state.playerHand[1].value) === 10 &&\n      this.returnValue(this.state.playerHand[0].value) === 11\n    ) {\n      this.setState({\n        playerHasBlackjack: true\n      });\n    }\n\n    // Check for dealer blackjack\n    if (\n      this.returnValue(this.state.dealerHand[0].value) === 10 &&\n      this.returnValue(this.state.dealerHand[1].value) === 11\n    ) {\n      this.setState({\n        dealerHasBlackjack: true\n      });\n    } else if (\n      this.returnValue(this.state.dealerHand[1].value) === 10 &&\n      this.returnValue(this.state.dealerHand[0].value) === 11\n    ) {\n      this.setState({\n        dealerHasBlackjack: true\n      });\n    }\n\n    // Check who has blackjacks and award chips accordingly\n    if (this.state.playerHasBlackjack && this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        pushes: this.state.pushes + 1,\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'Push! You both have a Blackjack!'\n      });\n    } else if (this.state.playerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        playerWins: this.state.playerWins + 1,\n        playerBlackjacks: this.state.playerBlackjacks + 1,\n        playerChips:\n          this.state.playerChips +\n          this.state.betAmount +\n          (3 * this.state.chipsInPlay) / 2,\n        winAmount: (3 * this.state.chipsInPlay) / 2,\n        chipsInPlay: 0,\n        gameMessage: 'Blackjack!'\n      });\n    } else if (this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        dealerBlackjacks: this.state.dealerBlackjacks + 1,\n        chipsInPlay: 0,\n        gameMessage: 'Dealer has a Blackjack!'\n      });\n    }\n  }\n\n  // Checks if the player bust, if there is an ace in hand subtract 10 and set playerHasAce to false\n  bustChecker() {\n    if (this.state.playerHasAce && this.state.playerScore > 21) {\n      this.setState({\n        playerScore: this.state.playerScore - 10,\n        playerHasAce: false\n      });\n    } else if (this.state.playerScore > 21) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        playerBusts: this.state.playerBusts + 1,\n        chipsInPlay: 0,\n        gameMessage: 'You Busted!'\n      });\n    }\n  }\n\n  // Determines winner of hand\n  checkWinner() {\n    if (this.state.dealerScore > 21) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        dealerBusts: this.state.dealerBusts + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'Dealer busts, you won!'\n      });\n    } else if (\n      this.state.playerScore > this.state.dealerScore &&\n      this.state.playerScore <= 21\n    ) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: `You won!`\n      });\n    } else if (this.state.playerScore === this.state.dealerScore) {\n      this.setState({\n        // Set statistics\n        pushes: this.state.pushes + 1,\n        // Set chips, return original chips in play if push\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'You pushed!'\n      });\n    } else {\n      this.setState({\n        // Set statistics\n        dealerWins: this.state.dealerWins + 1,\n        // Set chips\n        chipsInPlay: 0,\n        gameMessage: 'You lost!'\n      });\n    }\n  }\n\n  // When player clicks HIT\n  handleDrawCardEvent = event => {\n    if (this.state.playerScore < 21) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then(res => res.json())\n        .then(json => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if player hits multiple aces\n          if (newValue === 11 && this.state.playerHasAce) {\n            this.setState({\n              playerScore: this.state.playerScore - 10,\n              playerHasAce: true,\n              playerSplittable: false\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              playerHasAce: true,\n              playerSplittable: false\n            });\n          }\n          // Otherwise update player hand and player score from response\n          this.setState({\n            playerHand: [...this.state.playerHand, json.cards[0]],\n            playerScore: this.state.playerScore + newValue,\n            playerSplittable: false\n          });\n          this.bustChecker();\n        })\n        .catch(err => console.log(err));\n    }\n  };\n\n  // When player clicks STAND, execute dealer hits less than 17\n  handleStandEvent = event => {\n    // If the dealer has an ace and is greater than 21, subtract 10 and set the ace flag to false, recursively call itself\n    if (this.state.dealerScore > 21 && this.state.dealerHasAce) {\n      this.setState({\n        dealerScore: this.state.dealerScore - 10,\n        dealerHasAce: false\n      });\n      this.handleStandEvent();\n    } else if (this.state.dealerScore < 17) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then(res => res.json())\n        .then(json => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if dealer hits multiple aces\n          if (newValue === 11 && this.state.dealerHasAce) {\n            this.setState({\n              dealerScore: this.state.dealerScore - 10,\n              dealerHasAce: true\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              dealerHasAce: true\n            });\n          }\n          this.setState({\n            playerPlaying: false,\n            dealerHand: [...this.state.dealerHand, json.cards[0]],\n            dealerScore: this.state.dealerScore + newValue\n          });\n          this.handleStandEvent();\n        });\n    } else {\n      // Check winner because dealer did not bust and has 17 or above\n      this.setState({\n        playerPlaying: false\n      });\n      this.checkWinner();\n    }\n  };\n\n  // When player clicks DOUBLE DOWN\n  handleDoubleDownEvent = event => {\n    // Handle Double Down Bet\n    if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: 'You do not have enough to double down!'\n      });\n    } else {\n      this.setState({\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.chipsInPlay + this.state.betAmount\n      });\n      if (this.state.playerScore < 21) {\n        fetch(\n          `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n        )\n          .then(res => res.json())\n          .then(json => {\n            const newValue = this.returnValue(json.cards[0].value);\n            // Check if new card is an ace\n            if (newValue === 11) {\n              this.setState({\n                playerHasAce: true\n              });\n            }\n            this.setState({\n              playerHand: [...this.state.playerHand, json.cards[0]],\n              playerScore: this.state.playerScore + newValue,\n              playerPlaying: false\n            });\n            // Check if the double down was a bust, if it was a bust do not execute auto hits for dealer\n            this.bustChecker();\n            if (this.state.playerScore <= 21) {\n              this.handleStandEvent();\n            }\n          });\n      }\n    }\n  };\n\n  // When player clicks SPLIT\n  handleSplitEvent = event => {\n    this.setState({\n      dealerSplit: false\n    });\n  };\n\n  // When player clicks DEAL reset the hand states but not the game states\n  handleDealEvent = event => {\n    this.setState({\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      gameMessage: ''\n    });\n    this.handleDealHand();\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='gameHeader'>\n          <h1>Blackjack</h1>\n          {/* If game isn't started show Start Game button else show New Deck */}\n          {this.state.gameStarted ? (\n            <div>\n              <button className='lg red' onClick={() => this.handleEndGame()}>\n                New Game\n              </button>\n            </div>\n          ) : (\n            <button className='lg' onClick={() => this.handleDealHand()}>\n              Deal!\n            </button>\n          )}\n        </div>\n        {this.state.gameMessage ? (\n          <h2>{this.state.gameMessage}</h2>\n        ) : (\n          <h2>Welcome to Blackjack! Please buy in and place a bet</h2>\n        )}\n        {this.state.gameStarted ? (\n          <div className='hands-container'>\n            <Hand\n              name='Dealer'\n              cards={this.state.dealerHand}\n              score={this.state.dealerScore}\n              playerPlaying={this.state.playerPlaying}\n              dealerInitialScore={this.state.dealerInitialScore}\n            />\n            <Hand\n              name='Player'\n              cards={this.state.playerHand}\n              score={this.state.playerScore}\n              playerPlaying={this.state.playerPlaying}\n              playerSplittable={this.state.playerSplittable}\n              handleSplitEvent={this.handleSplitEvent}\n              handleDrawCardEvent={this.handleDrawCardEvent}\n              handleStandEvent={this.handleStandEvent}\n              handleDealEvent={this.handleDealEvent}\n              handleDoubleDownEvent={this.handleDoubleDownEvent}\n            />\n          </div>\n        ) : (\n          ''\n        )}\n        <Chips\n          playerChips={this.state.playerChips}\n          betAmount={this.state.betAmount}\n          chipsInPlay={this.state.chipsInPlay}\n          winAmount={this.state.winAmount}\n          playerPlaying={this.state.playerPlaying}\n          gameStarted={this.state.gameStarted}\n          // Increase Chips Functions\n          increaseChipOne={this.increaseChipOne}\n          increaseChipFive={this.increaseChipFive}\n          increaseChipTen={this.increaseChipTen}\n          increaseChipTwentyFive={this.increaseChipTwentyFive}\n          clearChips={this.clearChips}\n          // Bet Functions\n          increaseBetOne={this.increaseBetOne}\n          increaseBetFive={this.increaseBetFive}\n          increaseBetTen={this.increaseBetTen}\n          increaseBetTwentyFive={this.increaseBetTwentyFive}\n          clearBets={this.clearBets}\n        />\n        <Stats\n          playerWins={this.state.playerWins}\n          dealerWins={this.state.dealerWins}\n          playerBlackjacks={this.state.playerBlackjacks}\n          dealerBlackjacks={this.state.dealerBlackjacks}\n          playerBusts={this.state.playerBusts}\n          dealerBusts={this.state.dealerBusts}\n          pushes={this.state.pushes}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/blankCard.3b5d8172.jpg\";"],"sourceRoot":""}