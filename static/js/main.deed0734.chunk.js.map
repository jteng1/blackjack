{"version":3,"sources":["components/Card.jsx","components/Hand.jsx","components/Stats.jsx","components/Chips.jsx","App.js","index.js","images/blankCard.jpg"],"names":["Card","state","value","props","card","suit","code","image","className","src","this","alt","Component","Hand","cards","length","map","key","history","name","playerPlaying","dealerInitialScore","score","blankCard","onClick","event","handleDrawCardEvent","handleStandEvent","handleDoubleDownEvent","handleDealEvent","Stats","totalHands","playerWins","dealerWins","pushes","playerWinPercent","Math","floor","dealerWinPercent","playerBlackjacks","playerBusts","dealerBlackjacks","dealerBusts","Chips","gameStarted","increaseChipOne","increaseChipFive","increaseChipTen","increaseChipTwentyFive","increaseChipHundred","clearChips","playerChips","toFixed","betAmount","increaseBetOne","increaseBetFive","increaseBetTen","increaseBetTwentyFive","increaseBetHundred","increaseBetAllIn","clearBets","chipsInPlay","winAmount","initialBuy","App","setState","gameMessage","playerScore","fetch","deckId","then","res","json","newValue","returnValue","playerHasAce","playerSplittable","playerHand","bustChecker","catch","err","console","log","dealerSoft","softHit","dealerHand","dealerScore","dealerHasAce","checkWinner","handleSplitEvent","dealerSplit","dealerHasBlackjack","insurance","playerHasBlackjack","handleDealHand","deck_id","ACE","KING","QUEEN","JACK","10","9","8","7","6","5","4","3","2","remaining","value0","value1","value2","value3","blackJackChecker","handleEndGame","ReactDOM","render","document","getElementById","module","exports"],"mappings":"kNAEqBA,E,4MACnBC,MAAQ,CACNC,MAAO,EAAKC,MAAMC,KAAKF,MACvBG,KAAM,EAAKF,MAAMC,KAAKC,KACtBC,KAAM,EAAKH,MAAMC,KAAKE,KACtBC,MAAO,EAAKJ,MAAMC,KAAKG,O,uDAIvB,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,KAAKT,MAAMM,MAAOI,IAAI,c,GAXNC,a,gBCGbC,E,uKACT,IACJC,EADG,OAQP,OANIJ,KAAKP,MAAMW,MAAMC,SACnBD,EAAQJ,KAAKP,MAAMW,MAAME,KAAI,SAACZ,GAAD,OAC3B,kBAAC,EAAD,CAAMa,IAAKb,EAAKE,KAAMF,KAAMA,EAAMc,QAAS,EAAKf,MAAMe,cAKxD,yBAAKV,UAAU,QACQ,WAApBE,KAAKP,MAAMgB,KACV,yBAAKX,UAAU,kBACZE,KAAKP,MAAMiB,cACV,4BACGV,KAAKP,MAAMgB,KADd,IACqBT,KAAKP,MAAMkB,oBAGhC,4BACGX,KAAKP,MAAMgB,KADd,IACqBT,KAAKP,MAAMmB,OAIN,GAA3BZ,KAAKP,MAAMW,MAAMC,OAChB,yBAAKP,UAAU,mBACb,yBAAKC,IAAKc,IAAWZ,IAAI,WAAWH,UAAU,cAC9C,yBAAKC,IAAKc,IAAWZ,IAAI,WAAWH,UAAU,eAGhD,GAGDE,KAAKP,MAAMiB,cACV,yBAAKZ,UAAU,mBACb,yBAAKC,IAAKc,IAAWZ,IAAI,WAAWH,UAAU,cAC7CM,EAAM,IAGT,yBAAKN,UAAU,mBAAmBM,IAItC,yBAAKN,UAAU,kBACb,4BACGE,KAAKP,MAAMgB,KADd,IACqBT,KAAKP,MAAMmB,OAGJ,GAA3BZ,KAAKP,MAAMW,MAAMC,OAChB,yBAAKP,UAAU,mBACb,yBAAKC,IAAKc,IAAWZ,IAAI,WAAWH,UAAU,cAC9C,yBAAKC,IAAKc,IAAWZ,IAAI,WAAWH,UAAU,eAGhD,GAEF,yBAAKA,UAAU,mBAAmBM,GACjCJ,KAAKP,MAAMiB,cACV,yBAAKZ,UAAU,kBACb,4BACEA,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMuB,oBAAoBD,KAFrD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMwB,iBAAiBF,KAFlD,SAM6B,IAA5Bf,KAAKP,MAAMW,MAAMC,OAChB,4BACEP,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMyB,sBAAsBH,KAFvD,eAOA,IAeJ,4BACEjB,UAAU,YACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM0B,gBAAgBJ,KAFjD,c,GA7FoBb,aCHbkB,E,uKAIjB,IAAIC,EAAarB,KAAKP,MAAM6B,WAAatB,KAAKP,MAAM8B,WAAavB,KAAKP,MAAM+B,OACxEC,EAAmBC,KAAKC,MAAM3B,KAAKP,MAAM6B,WAAWD,EAAW,KAC/DO,EAAmBF,KAAKC,MAAM3B,KAAKP,MAAM8B,WAAWF,EAAW,KAEnE,OACE,yBAAKvB,UAAU,mBACb,yBAAKA,UAAU,eACX,2CAAiBE,KAAKP,MAAM6B,YAC5B,qDAA2BG,GAAyC,IAApE,KACA,iDAAuBzB,KAAKP,MAAMoC,kBAClC,4CAAkB7B,KAAKP,MAAMqC,cAEjC,yBAAKhC,UAAU,aACX,sCAAYE,KAAKP,MAAM+B,QACvB,2CAAiBH,IAErB,yBAAKvB,UAAU,eACX,2CAAiBE,KAAKP,MAAM8B,YAC5B,qDAA2BK,GAAyC,IAApE,KACA,iDAAuB5B,KAAKP,MAAMsC,kBAClC,4CAAkB/B,KAAKP,MAAMuC,mB,GAxBN9B,aCAd+B,E,uKACT,IAAD,OACP,OACE,yBAAKnC,UAAU,oBAEe,IAA3BE,KAAKP,MAAMyC,YACV,yBAAKpC,UAAU,gBACb,4BACEA,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM0C,gBAAgBpB,KAFjD,MAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM2C,iBAAiBrB,KAFlD,MAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM4C,gBAAgBtB,KAFjD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM6C,uBAAuBvB,KAFxD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM8C,oBAAoBxB,KAFrD,QAMA,4BACEjB,UAAU,SACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAM+C,WAAWzB,KAF5C,eAMA,6CACA,gCAAMf,KAAKP,MAAMgD,YAAYC,QAAQ,IACrC,2CACA,gCAAM1C,KAAKP,MAAMkD,UAAUD,QAAQ,IACnC,yBAAK5C,UAAU,aAEiB,IAA7BE,KAAKP,MAAMiB,eACe,IAA3BV,KAAKP,MAAMgD,YACT,yBAAK3C,UAAU,eACb,4BACEA,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMmD,eAAe7B,KAFhD,MAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMoD,gBAAgB9B,KAFjD,MAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMqD,eAAe/B,KAFhD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMsD,sBAAsBhC,KAFvD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMuD,mBAAmBjC,KAFpD,QAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMwD,iBAAiBlC,KAFlD,WAMA,4BACEjB,UAAU,SACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMyD,UAAUnC,KAF3C,eAQF,KAKN,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,aAEiB,IAA7BE,KAAKP,MAAMiB,eACe,IAA3BV,KAAKP,MAAMgD,YACT,yBAAK3C,UAAU,eACb,4BACEA,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMmD,eAAe7B,KAFhD,MAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMoD,gBAAgB9B,KAFjD,MAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMqD,eAAe/B,KAFhD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMsD,sBAAsBhC,KAFvD,OAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMuD,mBAAmBjC,KAFpD,QAMA,4BACEjB,UAAU,KACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMwD,iBAAiBlC,KAFlD,WAMA,4BACEjB,UAAU,SACVgB,QAAS,SAACC,GAAD,OAAW,EAAKtB,MAAMyD,UAAUnC,KAF3C,eAQF,IAGJ,oCAAUf,KAAKP,MAAMkD,UAAUD,QAAQ,IACvC,6CAAmB1C,KAAKP,MAAMgD,YAAYC,QAAQ,IAClD,+CAAqB1C,KAAKP,MAAM0D,YAAYT,QAAQ,IACpD,4CAAkB1C,KAAKP,MAAM2D,UAAUV,QAAQ,IAC/C,gDAAsB1C,KAAKP,MAAM4D,WAAWX,QAAQ,U,GA9J7BxC,aCGdoD,E,kDACnB,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IA6FR0C,gBAAkB,SAACpB,GACjB,EAAKwC,SAAS,CACZF,WAAY,EAAK9D,MAAM8D,WAAa,EACpCZ,YAAa,EAAKlD,MAAMkD,YAAc,KAjGvB,EAqGnBL,iBAAmB,SAACrB,GAClB,EAAKwC,SAAS,CACZF,WAAY,EAAK9D,MAAM8D,WAAa,EACpCZ,YAAa,EAAKlD,MAAMkD,YAAc,KAxGvB,EA4GnBJ,gBAAkB,SAACtB,GACjB,EAAKwC,SAAS,CACZF,WAAY,EAAK9D,MAAM8D,WAAa,GACpCZ,YAAa,EAAKlD,MAAMkD,YAAc,MA/GvB,EAmHnBH,uBAAyB,SAACvB,GACxB,EAAKwC,SAAS,CACZF,WAAY,EAAK9D,MAAM8D,WAAa,GACpCZ,YAAa,EAAKlD,MAAMkD,YAAc,MAtHvB,EA0HnBF,oBAAsB,SAACxB,GACrB,EAAKwC,SAAS,CACZF,WAAY,EAAK9D,MAAM8D,WAAa,IACpCZ,YAAa,EAAKlD,MAAMkD,YAAc,OA7HvB,EAiInBD,WAAa,SAACzB,GACZ,EAAKwC,SAAS,CACZF,WAAY,EACZZ,YAAa,KApIE,EAyInBG,eAAiB,SAAC7B,GACZ,EAAKxB,MAAMoD,UAAY,EAAI,EAAKpD,MAAMkD,YACxC,EAAKc,SAAS,CACZC,YAAa,mDAGf,EAAKD,SAAS,CACZZ,UAAW,EAAKpD,MAAMoD,UAAY,KAhJrB,EAqJnBE,gBAAkB,SAAC9B,GACb,EAAKxB,MAAMoD,UAAY,EAAI,EAAKpD,MAAMkD,YACxC,EAAKc,SAAS,CACZC,YAAa,mDAGf,EAAKD,SAAS,CACZZ,UAAW,EAAKpD,MAAMoD,UAAY,KA5JrB,EAiKnBG,eAAiB,SAAC/B,GACZ,EAAKxB,MAAMoD,UAAY,GAAK,EAAKpD,MAAMkD,YACzC,EAAKc,SAAS,CACZC,YAAa,mDAGf,EAAKD,SAAS,CACZZ,UAAW,EAAKpD,MAAMoD,UAAY,MAxKrB,EA6KnBI,sBAAwB,SAAChC,GACnB,EAAKxB,MAAMoD,UAAY,GAAK,EAAKpD,MAAMkD,YACzC,EAAKc,SAAS,CACZC,YAAa,mDAGf,EAAKD,SAAS,CACZZ,UAAW,EAAKpD,MAAMoD,UAAY,MApLrB,EAyLnBK,mBAAqB,SAACjC,GAChB,EAAKxB,MAAMoD,UAAY,IAAM,EAAKpD,MAAMkD,YAC1C,EAAKc,SAAS,CACZC,YAAa,mDAGf,EAAKD,SAAS,CACZZ,UAAW,EAAKpD,MAAMoD,UAAY,OAhMrB,EAqMnBM,iBAAmB,SAAClC,GAClB,EAAKwC,SAAS,CACZZ,UAAW,EAAKpD,MAAMkD,eAvMP,EA2MnBS,UAAY,SAACnC,GACX,EAAKwC,SAAS,CACZZ,UAAW,KA7MI,EAkhBnB3B,oBAAsB,SAACD,GACjB,EAAKxB,MAAMkE,YAAc,IAC3BC,MAAM,uCAAD,OACoC,EAAKnE,MAAMoE,OAD/C,mBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,IAAMC,EAAW,EAAKC,YAAYF,EAAK1D,MAAM,GAAGZ,OAE/B,KAAbuE,GAAmB,EAAKxE,MAAM0E,aAChC,EAAKV,SAAS,CACZE,YAAa,EAAKlE,MAAMkE,YAAc,GACtCQ,cAAc,EACdC,kBAAkB,IAEE,KAAbH,GACT,EAAKR,SAAS,CACZU,cAAc,EACdC,kBAAkB,IAItB,EAAKX,SAAS,CACZY,WAAW,GAAD,mBAAM,EAAK5E,MAAM4E,YAAjB,CAA6BL,EAAK1D,MAAM,KAClDqD,YAAa,EAAKlE,MAAMkE,YAAcM,EACtCG,kBAAkB,IAEpB,EAAKE,iBAENC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OA/iBf,EAojBnBrD,iBAAmB,SAACF,GAGd,EAAKxB,MAAMkF,WACbf,MAAM,uCAAD,OACoC,EAAKnE,MAAMoE,OAD/C,mBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,IAAMY,EAAU,EAAKV,YAAYF,EAAK1D,MAAM,GAAGZ,OAC/C,EAAK+D,SAAS,CACZoB,WAAW,GAAD,mBAAM,EAAKpF,MAAMoF,YAAjB,CAA6Bb,EAAK1D,MAAM,KAClDwE,YAAa,EAAKrF,MAAMqF,YAAcF,EACtCD,YAAY,IAEd,EAAKxD,sBAEA,EAAK1B,MAAMsF,cAA2C,KAA3B,EAAKtF,MAAMqF,YAC/ClB,MAAM,uCAAD,OACoC,EAAKnE,MAAMoE,OAD/C,mBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,IAAMY,EAAU,EAAKV,YAAYF,EAAK1D,MAAM,GAAGZ,OAC/C,EAAK+D,SAAS,CACZoB,WAAW,GAAD,mBAAM,EAAKpF,MAAMoF,YAAjB,CAA6Bb,EAAK1D,MAAM,KAClDwE,YAAa,EAAKrF,MAAMqF,YAAcF,IAExC,EAAKzD,sBAEA,EAAK1B,MAAMqF,YAAc,IAAM,EAAKrF,MAAMsF,cACnD,EAAKtB,SAAS,CACZqB,YAAa,EAAKrF,MAAMqF,YAAc,GACtCC,cAAc,IAEhB,EAAK5D,oBACI,EAAK1B,MAAMqF,YAAc,GAClClB,MAAM,uCAAD,OACoC,EAAKnE,MAAMoE,OAD/C,mBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,IAAMC,EAAW,EAAKC,YAAYF,EAAK1D,MAAM,GAAGZ,OAE/B,KAAbuE,GAAmB,EAAKxE,MAAMsF,aAChC,EAAKtB,SAAS,CACZqB,YAAa,EAAKrF,MAAMqF,YAAc,GACtCC,cAAc,IAEM,KAAbd,GACT,EAAKR,SAAS,CACZsB,cAAc,IAGlB,EAAKtB,SAAS,CACZ7C,eAAe,EACfiE,WAAW,GAAD,mBAAM,EAAKpF,MAAMoF,YAAjB,CAA6Bb,EAAK1D,MAAM,KAClDwE,YAAa,EAAKrF,MAAMqF,YAAcb,IAExC,EAAK9C,uBAIT,EAAKsC,SAAS,CACZ7C,eAAe,IAEjB,EAAKoE,gBAtnBU,EA2nBnB5D,sBAAwB,SAACH,GAEnB,EAAKxB,MAAMoD,UAAY,EAAKpD,MAAMkD,YACpC,EAAKc,SAAS,CACZC,YAAa,4CAGf,EAAKD,SAAS,CACZd,YAAa,EAAKlD,MAAMkD,YAAc,EAAKlD,MAAMoD,UACjDQ,YAAa,EAAK5D,MAAM4D,YAAc,EAAK5D,MAAMoD,YAE/C,EAAKpD,MAAMkE,YAAc,IAC3BC,MAAM,uCAAD,OACoC,EAAKnE,MAAMoE,OAD/C,mBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,IAAMC,EAAW,EAAKC,YAAYF,EAAK1D,MAAM,GAAGZ,OAE/B,KAAbuE,GACF,EAAKR,SAAS,CACZU,cAAc,IAGlB,EAAKV,SAAS,CACZY,WAAW,GAAD,mBAAM,EAAK5E,MAAM4E,YAAjB,CAA6BL,EAAK1D,MAAM,KAClDqD,YAAa,EAAKlE,MAAMkE,YAAcM,EACtCrD,eAAe,IAGjB,EAAK0D,cACD,EAAK7E,MAAMkE,aAAe,IAC5B,EAAKxC,wBA3pBE,EAmqBnB8D,iBAAmB,SAAChE,GAClB,EAAKwC,SAAS,CACZyB,aAAa,KArqBE,EA0qBnB7D,gBAAkB,SAACJ,GACjB,EAAKwC,SAAS,CACZ7C,eAAe,EACfiE,WAAY,GACZC,YAAa,EACbjE,mBAAoB,EACpBkE,cAAc,EACdI,oBAAoB,EACpBR,YAAY,EACZS,WAAW,EACXf,WAAY,GACZV,YAAa,EACbQ,cAAc,EACdkB,oBAAoB,EACpBjB,kBAAkB,EAClBV,YAAa,KAEf,EAAK4B,kBAxrBL,EAAK7F,MAAQ,CAEX2C,aAAa,EACbxB,eAAe,EACfiD,OAAQ,GAERgB,WAAY,GACZC,YAAa,EACbjE,mBAAoB,EACpBkE,cAAc,EACdI,oBAAoB,EACpBR,YAAY,EACZS,WAAW,EAEXf,WAAY,GACZV,YAAa,EACbQ,cAAc,EACdkB,oBAAoB,EACpBjB,kBAAkB,EAElB5C,WAAY,EACZC,WAAY,EACZC,OAAQ,EACRK,iBAAkB,EAClBE,iBAAkB,EAClBD,YAAa,EACbE,YAAa,EACbwB,YAAa,GAEbH,WAAY,EACZZ,YAAa,EACbE,UAAW,EACXQ,YAAa,EACbC,UAAW,GApCI,E,gEAyCE,IAAD,OAClBM,MAAM,iEACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKP,SAAS,CACZI,OAAQG,EAAKuB,e,sCAMJ,IAAD,OACd3B,MAAM,iEACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKP,SAAS,CACZI,OAAQG,EAAKuB,aAGnBrF,KAAKuD,SAAS,CACZrB,aAAa,EACbxB,eAAe,EACfiE,WAAY,GACZC,YAAa,EACbjE,mBAAoB,EACpBkE,cAAc,EACdI,oBAAoB,EACpBR,YAAY,EACZS,WAAW,EACXf,WAAY,GACZV,YAAa,EACbQ,cAAc,EACdkB,oBAAoB,EACpBjB,kBAAkB,EAElB5C,WAAY,EACZC,WAAY,EACZC,OAAQ,EACRK,iBAAkB,EAClBE,iBAAkB,EAClBD,YAAa,EACbE,YAAa,EACbwB,YAAa,GAEbH,WAAY,EACZZ,YAAa,EACbE,UAAW,EACXQ,YAAa,EACbC,UAAW,M,kCAyHH5D,GAiBV,MAhBmB,CACjB8F,IAAK,GACLC,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,GAAI,GACJC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAGa1G,K,uCAIF,IAAD,OAEgB,IAA3BQ,KAAKT,MAAMkD,YACbzC,KAAKuD,SAAS,CACZC,YAAY,0DAEoB,IAAzBxD,KAAKT,MAAMoD,UACpB3C,KAAKuD,SAAS,CACZC,YAAa,gCAENxD,KAAKT,MAAMoD,UAAY3C,KAAKT,MAAMkD,YAC3CzC,KAAKuD,SAAS,CACZC,YAAa,qCAIfxD,KAAKuD,SAAS,CACZZ,UAAW3C,KAAKT,MAAMoD,UACtBF,YAAazC,KAAKT,MAAMkD,YAAczC,KAAKT,MAAMoD,UACjDQ,YAAanD,KAAKT,MAAMoD,UACxBa,YAAa,sBACbJ,UAAW,IAGbM,MAAM,uCAAD,OACoC1D,KAAKT,MAAMoE,OAD/C,mBAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAELS,QAAQC,IAAIV,EAAKqC,WACbrC,EAAKqC,UAAY,KACnBzC,MAAM,uCAAD,OACoC,EAAKnE,MAAMoE,OAD/C,cAGFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACLS,QAAQC,IAAIV,GACZS,QAAQC,IAAI,uBAKlB,IAAM4B,EAAS,EAAKpC,YAAYF,EAAK1D,MAAM,GAAGZ,OACxC6G,EAAS,EAAKrC,YAAYF,EAAK1D,MAAM,GAAGZ,OACxC8G,EAAS,EAAKtC,YAAYF,EAAK1D,MAAM,GAAGZ,OACxC+G,EAAS,EAAKvC,YAAYF,EAAK1D,MAAM,GAAGZ,OAG/B,KAAX4G,GAA4B,KAAXE,EACnB,EAAK/C,SAAS,CACZrB,aAAa,EACbxB,eAAe,EACfyD,WAAW,GAAD,mBACL,EAAK5E,MAAM4E,YADN,CAERL,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEb6D,cAAc,EACdC,kBAAkB,EAClBT,YAAa,GACbkB,WAAW,GAAD,mBACL,EAAKpF,MAAMoF,YADN,CAERb,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbyE,cAAc,EACdD,YAAa,EAAKrF,MAAMqF,YAAcyB,EAASE,EAC/C5F,mBAAoB4F,IAEF,KAAXH,GAA4B,KAAXE,EAC1B,EAAK/C,SAAS,CACZrB,aAAa,EACbxB,eAAe,EACfyD,WAAW,GAAD,mBACL,EAAK5E,MAAM4E,YADN,CAERL,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbqD,YAAa,EAAKlE,MAAMkE,YAAc2C,EAASE,EAC/CrC,cAAc,EACdU,WAAW,GAAD,mBACL,EAAKpF,MAAMoF,YADN,CAERb,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbyE,cAAc,EACdD,YAAa,EAAKrF,MAAMqF,YAAcyB,EAASE,EAC/C5F,mBAAoB4F,IAEbH,IAAWE,EACpB,EAAK/C,SAAS,CACZrB,aAAa,EACbxB,eAAe,EACfwD,kBAAkB,EAClBC,WAAW,GAAD,mBACL,EAAK5E,MAAM4E,YADN,CAERL,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbqD,YAAa,EAAKlE,MAAMkE,YAAc2C,EAASE,EAC/C3B,WAAW,GAAD,mBACL,EAAKpF,MAAMoF,YADN,CAERb,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbyE,cAAc,EACdD,YAAa,EAAKrF,MAAMqF,YAAcyB,EAASE,EAC/C5F,mBAAoB4F,IAGtB,EAAKhD,SAAS,CACZrB,aAAa,EACbxB,eAAe,EACfyD,WAAW,GAAD,mBACL,EAAK5E,MAAM4E,YADN,CAERL,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbqD,YAAa,EAAKlE,MAAMkE,YAAc2C,EAASE,EAC/C3B,WAAW,GAAD,mBACL,EAAKpF,MAAMoF,YADN,CAERb,EAAK1D,MAAM,GACX0D,EAAK1D,MAAM,KAEbyE,cAAc,EACdD,YAAa,EAAKrF,MAAMqF,YAAcyB,EAASE,EAC/C5F,mBAAoB4F,IAIT,KAAXF,GAA4B,KAAXE,EACnB,EAAKhD,SAAS,CACZsB,cAAc,EACdD,YAAa,GACbM,WAAW,IAIbmB,EAASE,IAAW,IACR,KAAXF,GAA4B,KAAXE,EAOE,KAAXA,EACT,EAAKhD,SAAS,CACZsB,cAAc,EACdK,WAAW,IAGO,KAAXmB,GAA4B,KAAXE,GAC1B,EAAKhD,SAAS,CACZsB,cAAc,IAbhB,EAAKtB,SAAS,CACZsB,cAAc,EACdJ,YAAY,EACZG,YAAa,KAcjB,EAAK4B,sBAENnC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,S,0CAQuB,KAArDtE,KAAKgE,YAAYhE,KAAKT,MAAM4E,WAAW,GAAG3E,QACW,KAArDQ,KAAKgE,YAAYhE,KAAKT,MAAM4E,WAAW,GAAG3E,QAMW,KAArDQ,KAAKgE,YAAYhE,KAAKT,MAAM4E,WAAW,GAAG3E,QACW,KAArDQ,KAAKgE,YAAYhE,KAAKT,MAAM4E,WAAW,GAAG3E,SAL1CQ,KAAKuD,SAAS,CACZ4B,oBAAoB,KAa+B,KAArDnF,KAAKgE,YAAYhE,KAAKT,MAAMoF,WAAW,GAAGnF,QACW,KAArDQ,KAAKgE,YAAYhE,KAAKT,MAAMoF,WAAW,GAAGnF,QAMW,KAArDQ,KAAKgE,YAAYhE,KAAKT,MAAMoF,WAAW,GAAGnF,QACW,KAArDQ,KAAKgE,YAAYhE,KAAKT,MAAMoF,WAAW,GAAGnF,SAL1CQ,KAAKuD,SAAS,CACZ0B,oBAAoB,IAYpBjF,KAAKT,MAAM4F,oBAAsBnF,KAAKT,MAAM0F,mBAC9CjF,KAAKuD,SAAS,CACZ7C,eAAe,EACfc,OAAQxB,KAAKT,MAAMiC,OAAS,EAC5BiB,YAAazC,KAAKT,MAAMkD,YAAczC,KAAKT,MAAM4D,YACjDA,YAAa,EACbK,YAAa,qCAENxD,KAAKT,MAAM4F,mBACpBnF,KAAKuD,SAAS,CACZ7C,eAAe,EACfY,WAAYtB,KAAKT,MAAM+B,WAAa,EACpCO,iBAAkB7B,KAAKT,MAAMsC,iBAAmB,EAChDY,YACEzC,KAAKT,MAAMkD,YACXzC,KAAKT,MAAMoD,UACV,EAAI3C,KAAKT,MAAM4D,YAAe,EACjCC,UAAY,EAAIpD,KAAKT,MAAM4D,YAAe,EAC1CA,YAAa,EACbK,YAAa,eAENxD,KAAKT,MAAM0F,oBACpBjF,KAAKuD,SAAS,CACZ7C,eAAe,EACfa,WAAYvB,KAAKT,MAAMgC,WAAa,EACpCQ,iBAAkB/B,KAAKT,MAAMwC,iBAAmB,EAChDoB,YAAa,EACbK,YAAa,8B,oCAObxD,KAAKT,MAAM0E,cAAgBjE,KAAKT,MAAMkE,YAAc,GACtDzD,KAAKuD,SAAS,CACZE,YAAazD,KAAKT,MAAMkE,YAAc,GACtCQ,cAAc,IAEPjE,KAAKT,MAAMkE,YAAc,IAClCzD,KAAKuD,SAAS,CACZ7C,eAAe,EACfa,WAAYvB,KAAKT,MAAMgC,WAAa,EACpCO,YAAa9B,KAAKT,MAAMuC,YAAc,EACtCqB,YAAa,EACbK,YAAa,kB,oCAObxD,KAAKT,MAAMqF,YAAc,GAC3B5E,KAAKuD,SAAS,CAEZjC,WAAYtB,KAAKT,MAAM+B,WAAa,EACpCU,YAAahC,KAAKT,MAAMyC,YAAc,EAEtCS,YAAazC,KAAKT,MAAMkD,YAAc,EAAIzC,KAAKT,MAAM4D,YACrDC,UAAWpD,KAAKT,MAAM4D,YACtBA,YAAa,EACbK,YAAa,2BAGfxD,KAAKT,MAAMkE,YAAczD,KAAKT,MAAMqF,aACpC5E,KAAKT,MAAMkE,aAAe,GAE1BzD,KAAKuD,SAAS,CAEZjC,WAAYtB,KAAKT,MAAM+B,WAAa,EAEpCmB,YAAazC,KAAKT,MAAMkD,YAAc,EAAIzC,KAAKT,MAAM4D,YACrDC,UAAWpD,KAAKT,MAAM4D,YACtBA,YAAa,EACbK,YAAY,aAELxD,KAAKT,MAAMkE,cAAgBzD,KAAKT,MAAMqF,YAC/C5E,KAAKuD,SAAS,CAEZ/B,OAAQxB,KAAKT,MAAMiC,OAAS,EAE5BiB,YAAazC,KAAKT,MAAMkD,YAAczC,KAAKT,MAAM4D,YACjDA,YAAa,EACbK,YAAa,gBAGfxD,KAAKuD,SAAS,CAEZhC,WAAYvB,KAAKT,MAAMgC,WAAa,EAEpC4B,YAAa,EACbK,YAAa,gB,+BAkLT,IAAD,OACP,OACE,yBAAK1D,UAAU,OACb,yBAAKA,UAAU,cACb,yCAECE,KAAKT,MAAM2C,YACV,6BACE,4BAAQpC,UAAU,SAASgB,QAAS,kBAAM,EAAK2F,kBAA/C,aAKF,IAGHzG,KAAKT,MAAMiE,YACV,4BAAKxD,KAAKT,MAAMiE,aAEhB,sDAEDxD,KAAKT,MAAM2C,YACV,yBAAKpC,UAAU,mBACb,kBAAC,EAAD,CACEW,KAAK,SACLL,MAAOJ,KAAKT,MAAMoF,WAClB/D,MAAOZ,KAAKT,MAAMqF,YAClBlE,cAAeV,KAAKT,MAAMmB,cAC1BC,mBAAoBX,KAAKT,MAAMoB,qBAEjC,kBAAC,EAAD,CACEF,KAAK,SACLL,MAAOJ,KAAKT,MAAM4E,WAClBvD,MAAOZ,KAAKT,MAAMkE,YAClB/C,cAAeV,KAAKT,MAAMmB,cAC1BwD,iBAAkBlE,KAAKT,MAAM2E,iBAC7Ba,iBAAkB/E,KAAK+E,iBACvB/D,oBAAqBhB,KAAKgB,oBAC1BC,iBAAkBjB,KAAKiB,iBACvBE,gBAAiBnB,KAAKmB,gBACtBD,sBAAuBlB,KAAKkB,yBAIhC,GAEF,kBAAC,EAAD,CACEuB,YAAazC,KAAKT,MAAMkD,YACxBE,UAAW3C,KAAKT,MAAMoD,UACtBU,WAAYrD,KAAKT,MAAM8D,WACvBF,YAAanD,KAAKT,MAAM4D,YACxBC,UAAWpD,KAAKT,MAAM6D,UACtB1C,cAAeV,KAAKT,MAAMmB,cAC1BwB,YAAalC,KAAKT,MAAM2C,YAExBC,gBAAiBnC,KAAKmC,gBACtBC,iBAAkBpC,KAAKoC,iBACvBC,gBAAiBrC,KAAKqC,gBACtBC,uBAAwBtC,KAAKsC,uBAC7BC,oBAAqBvC,KAAKuC,oBAC1BC,WAAYxC,KAAKwC,WAEjBI,eAAgB5C,KAAK4C,eACrBC,gBAAiB7C,KAAK6C,gBACtBC,eAAgB9C,KAAK8C,eACrBC,sBAAuB/C,KAAK+C,sBAC5BC,mBAAoBhD,KAAKgD,mBACzBC,iBAAkBjD,KAAKiD,iBACvBC,UAAWlD,KAAKkD,YAEhBlD,KAAKT,MAAM2C,YAKX,GAJA,4BAAQpC,UAAU,YAAYgB,QAAS,kBAAM,EAAKsE,mBAAlD,SAMF,kBAAC,EAAD,CACE9D,WAAYtB,KAAKT,MAAM+B,WACvBC,WAAYvB,KAAKT,MAAMgC,WACvBM,iBAAkB7B,KAAKT,MAAMsC,iBAC7BE,iBAAkB/B,KAAKT,MAAMwC,iBAC7BD,YAAa9B,KAAKT,MAAMuC,YACxBE,YAAahC,KAAKT,MAAMyC,YACxBR,OAAQxB,KAAKT,MAAMiC,c,GAnxBItB,aCAjCwG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,kBCLjDC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.deed0734.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n  state = {\n    value: this.props.card.value,\n    suit: this.props.card.suit,\n    code: this.props.card.code,\n    image: this.props.card.image\n  };\n\n  render() {\n    return (\n      <div className=\"Card\">\n        <img src={this.state.image} alt=\"Card\" />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card.jsx';\n\nimport blankCard from '../images/blankCard.jpg';\n\nexport default class Hand extends Component {\n  render() {\n    let cards;\n    if (this.props.cards.length) {\n      cards = this.props.cards.map((card) => (\n        <Card key={card.code} card={card} history={this.props.history} />\n      ));\n    }\n\n    return (\n      <div className='Hand'>\n        {this.props.name === 'Dealer' ? (\n          <div className='hand-container'>\n            {this.props.playerPlaying ? (\n              <h3>\n                {this.props.name} {this.props.dealerInitialScore}\n              </h3>\n            ) : (\n              <h3>\n                {this.props.name} {this.props.score}\n              </h3>\n            )}\n            {/* Show blank cards when not ready */}\n            {this.props.cards.length == 0 ? (\n              <div className='cards-container'>\n                <img src={blankCard} alt='cardback' className='blankCard' />\n                <img src={blankCard} alt='cardback' className='blankCard' />\n              </div>\n            ) : (\n              ''\n            )}\n            {/* If the player is playing, then the first card of the dealer is hidden */}\n            {this.props.playerPlaying ? (\n              <div className='cards-container'>\n                <img src={blankCard} alt='cardback' className='blankCard' />\n                {cards[1]}\n              </div>\n            ) : (\n              <div className='cards-container'>{cards}</div>\n            )}\n          </div>\n        ) : (\n          <div className='hand-container'>\n            <h3>\n              {this.props.name} {this.props.score}\n            </h3>\n            {/* Show blank cards when not ready */}\n            {this.props.cards.length == 0 ? (\n              <div className='cards-container'>\n                <img src={blankCard} alt='cardback' className='blankCard' />\n                <img src={blankCard} alt='cardback' className='blankCard' />\n              </div>\n            ) : (\n              ''\n            )}\n            <div className='cards-container'>{cards}</div>\n            {this.props.playerPlaying ? (\n              <div className='playingButtons'>\n                <button\n                  className='sm'\n                  onClick={(event) => this.props.handleDrawCardEvent(event)}\n                >\n                  Hit\n                </button>\n                <button\n                  className='sm'\n                  onClick={(event) => this.props.handleStandEvent(event)}\n                >\n                  Stand\n                </button>\n                {this.props.cards.length === 2 ? (\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.handleDoubleDownEvent(event)}\n                  >\n                    Double Down\n                  </button>\n                ) : (\n                  ''\n                )}\n                {/* TODO: Show split button when both cards are the same value */}\n                {/* {this.props.playerSplittable ? (\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.handleSplitEvent(event)}\n                  >\n                    Split\n                  </button>\n                ) : (\n                  ''\n                )} */}\n              </div>\n            ) : (\n              <button\n                className='lg purple'\n                onClick={(event) => this.props.handleDealEvent(event)}\n              >\n                Deal\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Stats extends Component {\n  \n    render() {\n\n    var totalHands = this.props.playerWins + this.props.dealerWins + this.props.pushes;\n    var playerWinPercent = Math.floor(this.props.playerWins/totalHands*100);\n    var dealerWinPercent = Math.floor(this.props.dealerWins/totalHands*100);\n\n    return (\n      <div className=\"stats-container\">\n        <div className=\"playerStats\">\n            <p>Player Wins: {this.props.playerWins}</p>\n            <p>Player Win Percentage: {playerWinPercent ? (playerWinPercent) : (\"0\")}%</p>\n            <p>Player Blackjacks: {this.props.playerBlackjacks}</p>\n            <p>Player Busts: {this.props.playerBusts}</p>\n        </div>\n        <div className=\"gameStats\">\n            <p>Pushes: {this.props.pushes}</p>\n            <p>Total Hands: {totalHands}</p>\n        </div>\n        <div className=\"dealerStats\">\n            <p>Dealer Wins: {this.props.dealerWins}</p>\n            <p>Dealer Win Percentage: {dealerWinPercent ? (dealerWinPercent) : (\"0\")}%</p>\n            <p>Dealer Blackjacks: {this.props.dealerBlackjacks}</p>\n            <p>Dealer Busts: {this.props.dealerBusts}</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Chips extends Component {\n  render() {\n    return (\n      <div className='chips-container'>\n        {/* If game is not started then show player chips buttons */}\n        {this.props.gameStarted === false ? (\n          <div className='buyInButtons'>\n            <button\n              className='sm'\n              onClick={(event) => this.props.increaseChipOne(event)}\n            >\n              $1\n            </button>\n            <button\n              className='sm'\n              onClick={(event) => this.props.increaseChipFive(event)}\n            >\n              $5\n            </button>\n            <button\n              className='sm'\n              onClick={(event) => this.props.increaseChipTen(event)}\n            >\n              $10\n            </button>\n            <button\n              className='sm'\n              onClick={(event) => this.props.increaseChipTwentyFive(event)}\n            >\n              $25\n            </button>\n            <button\n              className='sm'\n              onClick={(event) => this.props.increaseChipHundred(event)}\n            >\n              $100\n            </button>\n            <button\n              className='sm red'\n              onClick={(event) => this.props.clearChips(event)}\n            >\n              Clear Chips\n            </button>\n            <h1>Buy-In Amount</h1>\n            <h1>${this.props.playerChips.toFixed(2)}</h1>\n            <h1>Initial Bet</h1>\n            <h1>${this.props.betAmount.toFixed(2)}</h1>\n            <div className='chipBets'>\n              {/* If player is not playing AND playerChips is not zero then show bet buttons */}\n              {this.props.playerPlaying === false &&\n              this.props.playerChips !== 0 ? (\n                <div className='chipButtons'>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetOne(event)}\n                  >\n                    $1\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetFive(event)}\n                  >\n                    $5\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetTen(event)}\n                  >\n                    $10\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetTwentyFive(event)}\n                  >\n                    $25\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetHundred(event)}\n                  >\n                    $100\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetAllIn(event)}\n                  >\n                    Max Bet\n                  </button>\n                  <button\n                    className='sm red'\n                    onClick={(event) => this.props.clearBets(event)}\n                  >\n                    Clear Bets\n                  </button>\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className='chipStats'>\n            <div className='chipBets'>\n              {/* If player is not playing AND playerChips is not zero then show bet buttons */}\n              {this.props.playerPlaying === false &&\n              this.props.playerChips !== 0 ? (\n                <div className='chipButtons'>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetOne(event)}\n                  >\n                    $1\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetFive(event)}\n                  >\n                    $5\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetTen(event)}\n                  >\n                    $10\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetTwentyFive(event)}\n                  >\n                    $25\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetHundred(event)}\n                  >\n                    $100\n                  </button>\n                  <button\n                    className='sm'\n                    onClick={(event) => this.props.increaseBetAllIn(event)}\n                  >\n                    Max Bet\n                  </button>\n                  <button\n                    className='sm red'\n                    onClick={(event) => this.props.clearBets(event)}\n                  >\n                    Clear Bets\n                  </button>\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n            <h2>Bet ${this.props.betAmount.toFixed(2)}</h2>\n            <h2>Player Chips ${this.props.playerChips.toFixed(2)}</h2>\n            <h5>Chips in Play $ {this.props.chipsInPlay.toFixed(2)}</h5>\n            <h5>Win Amount $ {this.props.winAmount.toFixed(2)}</h5>\n            <h3>Initial Buy-In $ {this.props.initialBuy.toFixed(2)}</h3>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Hand from './components/Hand.jsx';\nimport Stats from './components/Stats.jsx';\nimport Chips from './components/Chips.jsx';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    // Set the initial state of the application\n    this.state = {\n      // Game states\n      gameStarted: false,\n      playerPlaying: false,\n      deckId: '',\n      // Dealer options and flags\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      dealerSoft: false,\n      insurance: false,\n      // Player options and flags\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: '',\n      // Betting options and flags\n      initialBuy: 0,\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0,\n    };\n  }\n\n  // Fetches deck(s) from Deck of Cards API\n  componentDidMount() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=8`)\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          deckId: json.deck_id,\n        });\n      });\n  }\n\n  // When End Game is pressed a new deck is drawn, reset state to initial state\n  handleEndGame() {\n    fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=8`)\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          deckId: json.deck_id,\n        });\n      });\n    this.setState({\n      gameStarted: false,\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      dealerSoft: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      // Game Statistics\n      playerWins: 0,\n      dealerWins: 0,\n      pushes: 0,\n      playerBlackjacks: 0,\n      dealerBlackjacks: 0,\n      playerBusts: 0,\n      dealerBusts: 0,\n      gameMessage: '',\n      // Betting options and flags\n      initialBuy: 0,\n      playerChips: 0,\n      betAmount: 0,\n      chipsInPlay: 0,\n      winAmount: 0,\n    });\n  }\n\n  // Handle Buying In Chips Increase buttons\n  increaseChipOne = (event) => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 1,\n      playerChips: this.state.playerChips + 1,\n    });\n  };\n\n  increaseChipFive = (event) => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 5,\n      playerChips: this.state.playerChips + 5,\n    });\n  };\n\n  increaseChipTen = (event) => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 10,\n      playerChips: this.state.playerChips + 10,\n    });\n  };\n\n  increaseChipTwentyFive = (event) => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 25,\n      playerChips: this.state.playerChips + 25,\n    });\n  };\n\n  increaseChipHundred = (event) => {\n    this.setState({\n      initialBuy: this.state.initialBuy + 100,\n      playerChips: this.state.playerChips + 100,\n    });\n  };\n\n  clearChips = (event) => {\n    this.setState({\n      initialBuy: 0,\n      playerChips: 0,\n    });\n  };\n\n  // Handle Betting buttons\n  increaseBetOne = (event) => {\n    if (this.state.betAmount + 1 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\",\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 1,\n      });\n    }\n  };\n\n  increaseBetFive = (event) => {\n    if (this.state.betAmount + 5 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\",\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 5,\n      });\n    }\n  };\n\n  increaseBetTen = (event) => {\n    if (this.state.betAmount + 10 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\",\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 10,\n      });\n    }\n  };\n\n  increaseBetTwentyFive = (event) => {\n    if (this.state.betAmount + 25 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\",\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 25,\n      });\n    }\n  };\n\n  increaseBetHundred = (event) => {\n    if (this.state.betAmount + 100 > this.state.playerChips) {\n      this.setState({\n        gameMessage: \"You don't have enough chips to bet that amount\",\n      });\n    } else {\n      this.setState({\n        betAmount: this.state.betAmount + 100,\n      });\n    }\n  };\n\n  increaseBetAllIn = (event) => {\n    this.setState({\n      betAmount: this.state.playerChips,\n    });\n  };\n\n  clearBets = (event) => {\n    this.setState({\n      betAmount: 0,\n    });\n  };\n\n  // Return corresponding blackjack value from input card value\n  returnValue(value) {\n    const cardValues = {\n      ACE: 11,\n      KING: 10,\n      QUEEN: 10,\n      JACK: 10,\n      10: 10,\n      9: 9,\n      8: 8,\n      7: 7,\n      6: 6,\n      5: 5,\n      4: 4,\n      3: 3,\n      2: 2,\n    };\n\n    return cardValues[value];\n  }\n\n  // Handle the initial hand deal, i.e. when Start Game is clicked or when Deal is clicked\n  handleDealHand() {\n    // If player bet is zero\n    if (this.state.playerChips === 0) {\n      this.setState({\n        gameMessage: `You have no more money! Press NEW GAME to play again.`,\n      });\n    } else if (this.state.betAmount === 0) {\n      this.setState({\n        gameMessage: 'You have to bet some money!',\n      });\n    } else if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: 'You do not have that much money',\n      });\n    } else {\n      // Deal with initial betting\n      this.setState({\n        betAmount: this.state.betAmount,\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.betAmount,\n        gameMessage: 'Choose an action...',\n        winAmount: 0,\n      });\n      // Draw 4 cards from the deck\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=4`\n      )\n        .then((res) => res.json())\n        .then((json) => {\n          // Check remaining cards and shuffle deck if remaining cards is less than 100 cards, or 25% of deck\n          console.log(json.remaining);\n          if (json.remaining < 100) {\n            fetch(\n              `https://deckofcardsapi.com/api/deck/${this.state.deckId}/shuffle/`\n            )\n              .then((res) => res.json())\n              .then((json) => {\n                console.log(json);\n                console.log('Deck reshuffled!');\n              });\n          }\n\n          // Return blackjack values of json card values\n          const value0 = this.returnValue(json.cards[0].value);\n          const value1 = this.returnValue(json.cards[1].value);\n          const value2 = this.returnValue(json.cards[2].value);\n          const value3 = this.returnValue(json.cards[3].value);\n\n          // Check if the player has two Aces first or just an Ace, or else set default state\n          if (value0 === 11 && value2 === 11) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2],\n              ],\n              playerHasAce: true,\n              playerSplittable: true,\n              playerScore: 12,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3],\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3,\n            });\n          } else if (value0 === 11 || value2 === 11) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2],\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              playerHasAce: true,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3],\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3,\n            });\n          } else if (value0 === value2) {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerSplittable: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2],\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3],\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3,\n            });\n          } else {\n            this.setState({\n              gameStarted: true,\n              playerPlaying: true,\n              playerHand: [\n                ...this.state.playerHand,\n                json.cards[0],\n                json.cards[2],\n              ],\n              playerScore: this.state.playerScore + value0 + value2,\n              dealerHand: [\n                ...this.state.dealerHand,\n                json.cards[1],\n                json.cards[3],\n              ],\n              dealerHasAce: false,\n              dealerScore: this.state.dealerScore + value1 + value3,\n              dealerInitialScore: value3,\n            });\n          }\n          // Check if dealer has two aces or an ace\n          if (value1 === 11 && value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n              dealerScore: 12,\n              insurance: true,\n              // gameMessage: 'Insurance?'\n            });\n          } else if (\n            value1 + value3 === 17 &&\n            (value1 === 11 || value3 === 11)\n          ) {\n            this.setState({\n              dealerHasAce: true,\n              dealerSoft: true,\n              dealerScore: 17,\n            });\n          } else if (value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n              insurance: true,\n              // gameMessage: 'Insurance?'\n            });\n          } else if (value1 === 11 || value3 === 11) {\n            this.setState({\n              dealerHasAce: true,\n            });\n          }\n          // After the ace checks\n          this.blackJackChecker();\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  // Checks for blackjack\n  blackJackChecker() {\n    // Check for player blackjack\n    if (\n      this.returnValue(this.state.playerHand[0].value) === 10 &&\n      this.returnValue(this.state.playerHand[1].value) === 11\n    ) {\n      this.setState({\n        playerHasBlackjack: true,\n      });\n    } else if (\n      this.returnValue(this.state.playerHand[1].value) === 10 &&\n      this.returnValue(this.state.playerHand[0].value) === 11\n    ) {\n      this.setState({\n        playerHasBlackjack: true,\n      });\n    }\n\n    // Check for dealer blackjack\n    if (\n      this.returnValue(this.state.dealerHand[0].value) === 10 &&\n      this.returnValue(this.state.dealerHand[1].value) === 11\n    ) {\n      this.setState({\n        dealerHasBlackjack: true,\n      });\n    } else if (\n      this.returnValue(this.state.dealerHand[1].value) === 10 &&\n      this.returnValue(this.state.dealerHand[0].value) === 11\n    ) {\n      this.setState({\n        dealerHasBlackjack: true,\n      });\n    }\n\n    // Check who has blackjacks and award chips accordingly\n    if (this.state.playerHasBlackjack && this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        pushes: this.state.pushes + 1,\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'Push! You both have a Blackjack!',\n      });\n    } else if (this.state.playerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        playerWins: this.state.playerWins + 1,\n        playerBlackjacks: this.state.playerBlackjacks + 1,\n        playerChips:\n          this.state.playerChips +\n          this.state.betAmount +\n          (3 * this.state.chipsInPlay) / 2,\n        winAmount: (3 * this.state.chipsInPlay) / 2,\n        chipsInPlay: 0,\n        gameMessage: 'Blackjack!',\n      });\n    } else if (this.state.dealerHasBlackjack) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        dealerBlackjacks: this.state.dealerBlackjacks + 1,\n        chipsInPlay: 0,\n        gameMessage: 'Dealer has a Blackjack!',\n      });\n    }\n  }\n\n  // Checks if the player bust, if there is an ace in hand subtract 10 and set playerHasAce to false\n  bustChecker() {\n    if (this.state.playerHasAce && this.state.playerScore > 21) {\n      this.setState({\n        playerScore: this.state.playerScore - 10,\n        playerHasAce: false,\n      });\n    } else if (this.state.playerScore > 21) {\n      this.setState({\n        playerPlaying: false,\n        dealerWins: this.state.dealerWins + 1,\n        playerBusts: this.state.playerBusts + 1,\n        chipsInPlay: 0,\n        gameMessage: 'You Busted!',\n      });\n    }\n  }\n\n  // Determines winner of hand\n  checkWinner() {\n    if (this.state.dealerScore > 21) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        dealerBusts: this.state.dealerBusts + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'Dealer busts, you win!',\n      });\n    } else if (\n      this.state.playerScore > this.state.dealerScore &&\n      this.state.playerScore <= 21\n    ) {\n      this.setState({\n        // Set statistics\n        playerWins: this.state.playerWins + 1,\n        // Set chips, 2 times chips in play if you win\n        playerChips: this.state.playerChips + 2 * this.state.chipsInPlay,\n        winAmount: this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: `You win!`,\n      });\n    } else if (this.state.playerScore === this.state.dealerScore) {\n      this.setState({\n        // Set statistics\n        pushes: this.state.pushes + 1,\n        // Set chips, return original chips in play if push\n        playerChips: this.state.playerChips + this.state.chipsInPlay,\n        chipsInPlay: 0,\n        gameMessage: 'You pushed!',\n      });\n    } else {\n      this.setState({\n        // Set statistics\n        dealerWins: this.state.dealerWins + 1,\n        // Set chips\n        chipsInPlay: 0,\n        gameMessage: 'You lost!',\n      });\n    }\n  }\n\n  // When player clicks HIT\n  handleDrawCardEvent = (event) => {\n    if (this.state.playerScore < 21) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then((res) => res.json())\n        .then((json) => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if player hits multiple aces\n          if (newValue === 11 && this.state.playerHasAce) {\n            this.setState({\n              playerScore: this.state.playerScore - 10,\n              playerHasAce: true,\n              playerSplittable: false,\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              playerHasAce: true,\n              playerSplittable: false,\n            });\n          }\n          // Otherwise update player hand and player score from response\n          this.setState({\n            playerHand: [...this.state.playerHand, json.cards[0]],\n            playerScore: this.state.playerScore + newValue,\n            playerSplittable: false,\n          });\n          this.bustChecker();\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  // When player clicks STAND, execute dealer hits less than 17\n  handleStandEvent = (event) => {\n    // If the dealer has an ace and is greater than 21, subtract 10 and set the ace flag to false, recursively call itself\n    // Handle soft 17\n    if (this.state.dealerSoft) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then((res) => res.json())\n        .then((json) => {\n          const softHit = this.returnValue(json.cards[0].value);\n          this.setState({\n            dealerHand: [...this.state.dealerHand, json.cards[0]],\n            dealerScore: this.state.dealerScore + softHit,\n            dealerSoft: false,\n          });\n          this.handleStandEvent();\n        });\n    } else if (this.state.dealerHasAce && this.state.dealerScore === 17) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then((res) => res.json())\n        .then((json) => {\n          const softHit = this.returnValue(json.cards[0].value);\n          this.setState({\n            dealerHand: [...this.state.dealerHand, json.cards[0]],\n            dealerScore: this.state.dealerScore + softHit,\n          });\n          this.handleStandEvent();\n        });\n    } else if (this.state.dealerScore > 21 && this.state.dealerHasAce) {\n      this.setState({\n        dealerScore: this.state.dealerScore - 10,\n        dealerHasAce: false,\n      });\n      this.handleStandEvent();\n    } else if (this.state.dealerScore < 17) {\n      fetch(\n        `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n      )\n        .then((res) => res.json())\n        .then((json) => {\n          const newValue = this.returnValue(json.cards[0].value);\n          // Handle if dealer hits multiple aces\n          if (newValue === 11 && this.state.dealerHasAce) {\n            this.setState({\n              dealerScore: this.state.dealerScore - 10,\n              dealerHasAce: true,\n            });\n          } else if (newValue === 11) {\n            this.setState({\n              dealerHasAce: true,\n            });\n          }\n          this.setState({\n            playerPlaying: false,\n            dealerHand: [...this.state.dealerHand, json.cards[0]],\n            dealerScore: this.state.dealerScore + newValue,\n          });\n          this.handleStandEvent();\n        });\n    } else {\n      // Check winner because dealer did not bust and has 17 or above\n      this.setState({\n        playerPlaying: false,\n      });\n      this.checkWinner();\n    }\n  };\n\n  // When player clicks DOUBLE DOWN\n  handleDoubleDownEvent = (event) => {\n    // Handle Double Down Bet\n    if (this.state.betAmount > this.state.playerChips) {\n      this.setState({\n        gameMessage: 'You do not have enough to double down!',\n      });\n    } else {\n      this.setState({\n        playerChips: this.state.playerChips - this.state.betAmount,\n        chipsInPlay: this.state.chipsInPlay + this.state.betAmount,\n      });\n      if (this.state.playerScore < 21) {\n        fetch(\n          `https://deckofcardsapi.com/api/deck/${this.state.deckId}/draw/?count=1`\n        )\n          .then((res) => res.json())\n          .then((json) => {\n            const newValue = this.returnValue(json.cards[0].value);\n            // Check if new card is an ace\n            if (newValue === 11) {\n              this.setState({\n                playerHasAce: true,\n              });\n            }\n            this.setState({\n              playerHand: [...this.state.playerHand, json.cards[0]],\n              playerScore: this.state.playerScore + newValue,\n              playerPlaying: false,\n            });\n            // Check if the double down was a bust, if it was a bust do not execute auto hits for dealer\n            this.bustChecker();\n            if (this.state.playerScore <= 21) {\n              this.handleStandEvent();\n            }\n          });\n      }\n    }\n  };\n\n  // TODO: When player clicks SPLIT\n  handleSplitEvent = (event) => {\n    this.setState({\n      dealerSplit: false,\n    });\n  };\n\n  // When player clicks DEAL reset the hand states but not the game states\n  handleDealEvent = (event) => {\n    this.setState({\n      playerPlaying: false,\n      dealerHand: [],\n      dealerScore: 0,\n      dealerInitialScore: 0,\n      dealerHasAce: false,\n      dealerHasBlackjack: false,\n      dealerSoft: false,\n      insurance: false,\n      playerHand: [],\n      playerScore: 0,\n      playerHasAce: false,\n      playerHasBlackjack: false,\n      playerSplittable: false,\n      gameMessage: '',\n    });\n    this.handleDealHand();\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='gameHeader'>\n          <h1>Blackjack</h1>\n          {/* If game isn't started show Start Game button else show New Deck */}\n          {this.state.gameStarted ? (\n            <div>\n              <button className='sm red' onClick={() => this.handleEndGame()}>\n                New Game\n              </button>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        {this.state.gameMessage ? (\n          <h2>{this.state.gameMessage}</h2>\n        ) : (\n          <h2>Dealer hits on soft 17</h2>\n        )}\n        {this.state.gameStarted ? (\n          <div className='hands-container'>\n            <Hand\n              name='Dealer'\n              cards={this.state.dealerHand}\n              score={this.state.dealerScore}\n              playerPlaying={this.state.playerPlaying}\n              dealerInitialScore={this.state.dealerInitialScore}\n            />\n            <Hand\n              name='Player'\n              cards={this.state.playerHand}\n              score={this.state.playerScore}\n              playerPlaying={this.state.playerPlaying}\n              playerSplittable={this.state.playerSplittable}\n              handleSplitEvent={this.handleSplitEvent}\n              handleDrawCardEvent={this.handleDrawCardEvent}\n              handleStandEvent={this.handleStandEvent}\n              handleDealEvent={this.handleDealEvent}\n              handleDoubleDownEvent={this.handleDoubleDownEvent}\n            />\n          </div>\n        ) : (\n          ''\n        )}\n        <Chips\n          playerChips={this.state.playerChips}\n          betAmount={this.state.betAmount}\n          initialBuy={this.state.initialBuy}\n          chipsInPlay={this.state.chipsInPlay}\n          winAmount={this.state.winAmount}\n          playerPlaying={this.state.playerPlaying}\n          gameStarted={this.state.gameStarted}\n          // Increase Chips Functions\n          increaseChipOne={this.increaseChipOne}\n          increaseChipFive={this.increaseChipFive}\n          increaseChipTen={this.increaseChipTen}\n          increaseChipTwentyFive={this.increaseChipTwentyFive}\n          increaseChipHundred={this.increaseChipHundred}\n          clearChips={this.clearChips}\n          // Bet Functions\n          increaseBetOne={this.increaseBetOne}\n          increaseBetFive={this.increaseBetFive}\n          increaseBetTen={this.increaseBetTen}\n          increaseBetTwentyFive={this.increaseBetTwentyFive}\n          increaseBetHundred={this.increaseBetHundred}\n          increaseBetAllIn={this.increaseBetAllIn}\n          clearBets={this.clearBets}\n        />\n        {!this.state.gameStarted ? (\n          <button className='lg purple' onClick={() => this.handleDealHand()}>\n            Deal!\n          </button>\n        ) : (\n          ''\n        )}\n        <Stats\n          playerWins={this.state.playerWins}\n          dealerWins={this.state.dealerWins}\n          playerBlackjacks={this.state.playerBlackjacks}\n          dealerBlackjacks={this.state.dealerBlackjacks}\n          playerBusts={this.state.playerBusts}\n          dealerBusts={this.state.dealerBusts}\n          pushes={this.state.pushes}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/blankCard.3b5d8172.jpg\";"],"sourceRoot":""}